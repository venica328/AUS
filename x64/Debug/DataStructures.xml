<?xml version="1.0"?>
<doc>
    <assembly>
        "DataStructures"
    </assembly>
    <members>
        <member name="M:ui.ActionGraphClear.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionGraphClear.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu vyprazdni graf. </summary>
            <param name="graphControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionGraphClear">
            <summary> Trieda predstavuje akciu vyprazdni graf. </summary>
        </member>
        <member name="F:ui.ActionGraphDijkstra.dijkstra_">
            <summary> Smernik na instanciu predstavujucu Dijkstrov algoritmus. </summary>
        </member>
        <member name="M:ui.ActionGraphDijkstra.doPresentRedoResult">
            <summary> Prezentuje vysledok akcie, ktora bola zopakovana, uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionGraphDijkstra.doPresentResult">
            <summary> Prezentuje vysledok akcie uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionGraphDijkstra.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionGraphDijkstra.doFormat(ui.ActionMemento*)">
            <summary> Naformatuje akciu. </summary>
            <param name="memento"> Memento, podla ktoreho sa naformatuje. </param>
        </member>
        <member name="M:ui.ActionGraphDijkstra.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionGraphDijkstra.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionGraphDijkstra.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu vypocitaj minimalnu vzdialenost medzi danymi vrcholmi grafu Dijkstrovym algoritmom. </summary>
            <param name="graphControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionGraphDijkstra">
            <summary> Trieda predstavuje akciu vypocitaj minimalnu vzdialenost medzi danymi vrcholmi grafu Dijkstrovym algoritmom. </summary>
        </member>
        <member name="M:ui.ActionGraphRemoveEdge.doUndo(ui.ActionMemento*)">
            <summary> Zvrati akciu. </summary>
            <param name="memento"> Memento povodnej akcie. </param>
        </member>
        <member name="M:ui.ActionGraphRemoveEdge.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionGraphRemoveEdge.doFormat(ui.ActionMemento*)">
            <summary> Naformatuje akciu. </summary>
            <param name="memento"> Memento, podla ktoreho sa naformatuje. </param>
        </member>
        <member name="M:ui.ActionGraphRemoveEdge.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionGraphRemoveEdge.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionGraphRemoveEdge.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu odstran z grafu danu hranu. </summary>
            <param name="graphControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionGraphRemoveEdge">
            <summary> Trieda predstavuje akciu odstran z grafu danu hranu. </summary>
        </member>
        <member name="M:ui.ActionGraphEditEdgeData.doUndo(ui.ActionMemento*)">
            <summary> Zvrati akciu. </summary>
            <param name="memento"> Memento povodnej akcie. </param>
        </member>
        <member name="M:ui.ActionGraphEditEdgeData.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionGraphEditEdgeData.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionGraphEditEdgeData.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionGraphEditEdgeData.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu uprav data danej hrany. </summary>
            <param name="graphControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionGraphEditEdgeData">
            <summary> Trieda predstavuje akciu uprav data danej hrany. </summary>
        </member>
        <member name="M:ui.ActionGraphCreateEdge.doUndo(ui.ActionMemento*)">
            <summary> Zvrati akciu. </summary>
            <param name="memento"> Memento povodnej akcie. </param>
        </member>
        <member name="M:ui.ActionGraphCreateEdge.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionGraphCreateEdge.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionGraphCreateEdge.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionGraphCreateEdge.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu vytvor hranu medzi danymi vrcholmi grafu. </summary>
            <param name="graphControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionGraphCreateEdge">
            <summary> Trieda predstavuje akciu vytvor hranu medzi danymi vrcholmi grafu. </summary>
        </member>
        <member name="M:ui.ActionGraphGetPredecessors.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionGraphGetPredecessors.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionGraphGetPredecessors.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionGraphGetPredecessors.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu daj predchodcov vrchola s danym id. </summary>
            <param name="graphControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionGraphGetPredecessors">
            <summary> Trieda predstavuje akciu daj predchodcov vrchola s danym id. </summary>
        </member>
        <member name="M:ui.ActionGraphGetSuccessors.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionGraphGetSuccessors.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionGraphGetSuccessors.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionGraphGetSuccessors.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu daj nasledovnikov vrchola s danym id. </summary>
            <param name="graphControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionGraphGetSuccessors">
            <summary> Trieda predstavuje akciu daj nasledovnikov vrchola s danym id. </summary>
        </member>
        <member name="M:ui.ActionGraphRemoveVertex.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionGraphRemoveVertex.doFormat(ui.ActionMemento*)">
            <summary> Naformatuje akciu. </summary>
            <param name="memento"> Memento, podla ktoreho sa naformatuje. </param>
        </member>
        <member name="M:ui.ActionGraphRemoveVertex.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionGraphRemoveVertex.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionGraphRemoveVertex.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu odstran z grafu vrchol s danym id. </summary>
            <param name="graphControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionGraphRemoveVertex">
            <summary> Trieda predstavuje akciu odstran z grafu vrchol s danym id. </summary>
        </member>
        <member name="M:ui.ActionGraphEditVertexData.doUndo(ui.ActionMemento*)">
            <summary> Zvrati akciu. </summary>
            <param name="memento"> Memento povodnej akcie. </param>
        </member>
        <member name="M:ui.ActionGraphEditVertexData.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionGraphEditVertexData.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionGraphEditVertexData.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionGraphEditVertexData.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu uprav data vrchola s danym id. </summary>
            <param name="graphControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionGraphEditVertexData">
            <summary> Trieda predstavuje akciu uprav data vrchola s danym id. </summary>
        </member>
        <member name="M:ui.ActionGraphCreateVertex.doUndo(ui.ActionMemento*)">
            <summary> Zvrati akciu. </summary>
            <param name="memento"> Memento povodnej akcie. </param>
        </member>
        <member name="M:ui.ActionGraphCreateVertex.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionGraphCreateVertex.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionGraphCreateVertex.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu vytvor v grafe vrchol s danym id. </summary>
            <param name="graphControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionGraphCreateVertex">
            <summary> Trieda predstavuje akciu vytvor v grafe vrchol s danym id. </summary>
        </member>
        <member name="F:ui.ActionGraphEdge.endVertexId_">
            <summary> Id koncoveho vrcholu hrany, s ktorou pracuje akcia. </summary>
        </member>
        <member name="F:ui.ActionGraphEdge.beginVertexId_">
            <summary> Id pociatocneho vrcholu hrany, s ktorou pracuje akcia. </summary>
        </member>
        <member name="M:ui.ActionGraphEdge.doFormat(ui.ActionMemento*)">
            <summary> Naformatuje akciu. </summary>
            <param name="memento"> Memento, podla ktoreho sa naformatuje. </param>
        </member>
        <member name="M:ui.ActionGraphEdge.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionGraphEdge.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionGraphEdge.#ctor(System.Int32,System.String,System.Boolean,System.Boolean,ui.ControlsHolder)">
            <summary> Vytvori akciu nad hranou grafu. </summary>
            <param name="id"> ID akcie. </param>
            <param name="caption"> Popis akcie. </param>
            <param name="supportsUndo"> Priznak, ci moze byt akcia zvratena. </param>
            <param name="supportsRedo"> Priznak, ci moze byt akcia zopakovana. </param>
            <param name="graphControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionGraphEdge">
            <summary> Trieda predstavuje operaciu nad hranou grafu. </summary>
        </member>
        <member name="F:ui.ActionGraphVertex.edgeList_">
            <summary> Zoznam doprednych/spatnych hran. </summary>
        </member>
        <member name="F:ui.ActionGraphVertex.vertexId_">
            <summary> Id vrcholu, s ktorym pracuje akcia. </summary>
        </member>
        <member name="M:ui.ActionGraphVertex.doFormat(ui.ActionMemento*)">
            <summary> Naformatuje akciu. </summary>
            <param name="memento"> Memento, podla ktoreho sa naformatuje. </param>
        </member>
        <member name="M:ui.ActionGraphVertex.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionGraphVertex.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionGraphVertex.Finalize">
            <summary> Finalizer. </summary>
            <remarks> Upratuje nemanazovane zdroje. </remarks>
        </member>
        <member name="M:ui.ActionGraphVertex.Dispose">
            <summary> Destruktor. </summary>
            <remarks> Upratuje vsetky zdroje. </remarks>
        </member>
        <member name="M:ui.ActionGraphVertex.#ctor(System.Int32,System.String,System.Boolean,System.Boolean,ui.ControlsHolder)">
            <summary> Vytvori akciu nad vrcholom grafu. </summary>
            <param name="id"> ID akcie. </param>
            <param name="caption"> Popis akcie. </param>
            <param name="supportsUndo"> Priznak, ci moze byt akcia zvratena. </param>
            <param name="supportsRedo"> Priznak, ci moze byt akcia zopakovana. </param>
            <param name="graphControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionGraphVertex">
            <summary> Trieda predstavuje operaciu nad vrcholom grafu. </summary>
        </member>
        <member name="F:ui.ActionGraph.dataEdit_">
            <summary> Smernik na data ulozene v akcii. </summary>
        </member>
        <member name="M:ui.ActionGraph.accessEditData">
            <summary> Adresou vrati data na editovanie ulozene v prislusnej akcii. </summary>
            <returns> Adresa, na ktorej sa nachadzaju data. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak v akcii nie su ziadne editovatelne data. </exception>
        </member>
        <member name="M:ui.ActionGraph.doPresentResult">
            <summary> Prezentuje vysledok akcie pouzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionGraph.doFormat(ui.ActionMemento*)">
            <summary> Naformatuje akciu. </summary>
            <param name="memento"> Memento, podla ktoreho sa naformatuje. </param>
        </member>
        <member name="M:ui.ActionGraph.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionGraph.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionGraph.Finalize">
            <summary> Finalizer. </summary>
            <remarks> Upratuje nemanazovane zdroje. </remarks>
        </member>
        <member name="M:ui.ActionGraph.Dispose">
            <summary> Destruktor. </summary>
            <remarks> Upratuje vsetky zdroje. </remarks>
        </member>
        <member name="M:ui.ActionGraph.#ctor(System.Int32,System.String,System.Boolean,System.Boolean,ui.ControlsHolder,structures.GraphData*)">
            <summary> Vytvori akciu nad grafom. </summary>
            <param name="id"> ID akcie. </param>
            <param name="caption"> Popis akcie. </param>
            <param name="supportsUndo"> Priznak, ci moze byt akcia zvratena. </param>
            <param name="supportsRedo"> Priznak, ci moze byt akcia zopakovana. </param>
            <param name="graphControls"> Ovladanie, do ktoreho patri. </param>
            <param name="dataEdit"> Data, ktore maju byt ulozene v akcii. </param>
        </member>
        <member name="T:ui.ActionGraph">
            <summary> Trieda predstavuje operaciu v grafe. </summary>
        </member>
        <member name="M:ui.ControlsGraph.createActions(System.Collections.Generic.List`1{ui.Action})">
            <summary> Virtualna abstraktna metoda pre vytvorenie akcii ovladajucich udajovu strukturu. </summary>
            <param name="actions"> Zoznam akcii, kam je potrebne nove doregistrovat. </param>
        </member>
        <member name="M:ui.ControlsGraph.#ctor">
            <summary> Konstruktor. </summary>
        </member>
        <member name="M:ui.ControlsGraph.doVisualizeStructure">
            <summary> Vizualizuje strukturu. </summary>
        </member>
        <member name="M:ui.ControlsGraph.doCreatePresentPanel">
            <summary> Predefinovana metoda pre vytvorenie panelu s ovladanim struktury. </summary>
            <returns> Panel s ovladanim grafu. </returns>
        </member>
        <member name="T:ui.ControlsGraph">
            <summary> Ovladace pre grafy. </summary>
        </member>
        <member name="F:ui.GraphEdgeActionMemento.endVertexId_">
            <summary> Id koncoveho vrcholu. </summary>
        </member>
        <member name="F:ui.GraphEdgeActionMemento.beginVertexId_">
            <summary> Id pociatocneho vrcholu. </summary>
        </member>
        <member name="M:ui.GraphEdgeActionMemento.clone">
            <summary> Operacia klonovania. Vytvori a vrati duplikat mementa typu GraphEdgeActionMemento. </summary>
            <returns> Ukazovatel na klon mementa. </returns>
        </member>
        <member name="M:ui.GraphEdgeActionMemento.#ctor(ui.GraphEdgeActionMemento!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Kopirovaci konstruktor. </summary>
            <param name="other"> Memento, z ktoreho ma prebrat vlastnosti. </param>
        </member>
        <member name="M:ui.GraphEdgeActionMemento.#ctor(System.Int32)">
            <summary> Parametricky konstruktor. </summary>
            <param name="actionID"> ID ackie, ktora ho vytvorila. </param>
        </member>
        <member name="T:ui.GraphEdgeActionMemento">
            <summary> Memento akcii nad hranami grafov. </summary>
        </member>
        <member name="F:ui.GraphVertexActionMemento.vertexId_">
            <summary> Id vrcholu. </summary>
        </member>
        <member name="M:ui.GraphVertexActionMemento.clone">
            <summary> Operacia klonovania. Vytvori a vrati duplikat mementa typu GraphVertexActionMemento. </summary>
            <returns> Ukazovatel na klon mementa. </returns>
        </member>
        <member name="M:ui.GraphVertexActionMemento.#ctor(ui.GraphVertexActionMemento!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Kopirovaci konstruktor. </summary>
            <param name="other"> Memento, z ktoreho ma prebrat vlastnosti. </param>
        </member>
        <member name="M:ui.GraphVertexActionMemento.#ctor(System.Int32)">
            <summary> Parametricky konstruktor. </summary>
            <param name="actionID"> ID ackie, ktora ho vytvorila. </param>
        </member>
        <member name="T:ui.GraphVertexActionMemento">
            <summary> Memento akcii nad vrcholmi grafov. </summary>
        </member>
        <member name="F:ui.GraphActionMemento.dataAfter_">
            <summary> Stav dat po operacii. </summary>
        </member>
        <member name="F:ui.GraphActionMemento.dataBefore_">
            <summary> Stav dat pred operaciou. </summary>
        </member>
        <member name="M:ui.GraphActionMemento.op_Assign(ui.GraphActionMemento!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Memento typu GraphActionMemento, z ktoreho ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa toto memento typu GraphActionMemento nachadza po priradeni. </returns>
        </member>
        <member name="M:ui.GraphActionMemento.clone">
            <summary> Operacia klonovania. Vytvori a vrati duplikat mementa typu GraphActionMemento. </summary>
            <returns> Ukazovatel na klon mementa. </returns>
        </member>
        <member name="M:ui.GraphActionMemento.Dispose">
            <summary> Destruktor. </summary>
        </member>
        <member name="M:ui.GraphActionMemento.#ctor(ui.GraphActionMemento!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Kopirovaci konstruktor. </summary>
            <param name="other"> Memento, z ktoreho ma prebrat vlastnosti. </param>
        </member>
        <member name="M:ui.GraphActionMemento.#ctor(System.Int32,structures.GraphData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Parametricky konstruktor. </summary>
            <param name="actionID"> ID akcie, ktora ho vytvorila. </param>
            <param name="defaultData"> Defaultna hodnota dat ulozenych v memente. </param>
        </member>
        <member name="T:ui.GraphActionMemento">
            <summary> Vseobecny predok mementa akcii nad grafom. </summary>
        </member>
        <member name="M:ui.PanelPresentGraph.InitializeComponent">
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="F:ui.PanelPresentGraph.components">
            <summary>
Required designer variable.
</summary>
        </member>
        <member name="M:ui.ActionTableClear.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionTableClear.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu vymaz tabulku. </summary>
            <param name="tableControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionTableClear">
            <summary> Trieda predstavuje akciu vymaz tabulku. </summary>
        </member>
        <member name="M:ui.ActionTableContainsKey.doPresentRedoResult">
            <summary> Prezentuje vysledok akcie, ktora bola zopakovana, uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionTableContainsKey.doPresentResult">
            <summary> Prezentuje vysledok akcie uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionTableContainsKey.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionTableContainsKey.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionTableContainsKey.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu obsahuje tabulka data s danym klucom. </summary>
            <param name="tableControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionTableContainsKey">
            <summary> Trieda predstavuje akciu obsahuje tabulka data s danym klucom. </summary>
        </member>
        <member name="M:ui.ActionTableTryFind.doPresentRedoResult">
            <summary> Prezentuje vysledok akcie, ktora bola zopakovana, uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionTableTryFind.doPresentResult">
            <summary> Prezentuje vysledok akcie uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionTableTryFind.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionTableTryFind.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionTableTryFind.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu bezpecne ziskaj data s danym klucom z tabulky. </summary>
            <param name="tableControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionTableTryFind">
            <summary> Trieda predstavuje akciu bezpecne ziskaj data s danym klucom z tabulky. </summary>
        </member>
        <member name="M:ui.ActionTableRemove.doPresentRedoResult">
            <summary> Prezentuje vysledok akcie, ktora bola zopakovana, uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionTableRemove.doPresentResult">
            <summary> Prezentuje vysledok akcie uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionTableRemove.doUndo(ui.ActionMemento*)">
            <summary> Zvrati akciu. </summary>
            <param name="memento"> Memento povodnej akcie. </param>
        </member>
        <member name="M:ui.ActionTableRemove.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionTableRemove.doFormat(ui.ActionMemento*)">
            <summary> Naformatuje akciu. </summary>
            <param name="memento"> Memento, podla ktoreho sa naformatuje. </param>
        </member>
        <member name="M:ui.ActionTableRemove.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionTableRemove.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu odstran z tabulky data s danym klucom. </summary>
            <param name="tableControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionTableRemove">
            <summary> Trieda predstavuje akciu odstran z tabulky data s danym klucom. </summary>
        </member>
        <member name="M:ui.ActionTableEdit.doUndo(ui.ActionMemento*)">
            <summary> Zvrati akciu. </summary>
            <param name="memento"> Memento povodnej akcie. </param>
        </member>
        <member name="M:ui.ActionTableEdit.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionTableEdit.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionTableEdit.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu uprav data s danym klucom v tabulke. </summary>
            <param name="tableControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionTableEdit">
            <summary> Trieda predstavuje akciu uprav data s danym klucom v tabulke. </summary>
        </member>
        <member name="M:ui.ActionTableInsert.doUndo(ui.ActionMemento*)">
            <summary> Zvrati akciu. </summary>
            <param name="memento"> Memento povodnej akcie. </param>
        </member>
        <member name="M:ui.ActionTableInsert.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionTableInsert.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionTableInsert.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu vloz data s danym klucom do tabulky. </summary>
            <param name="tableControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionTableInsert">
            <summary> Trieda predstavuje akciu vloz data s danym klucom do tabulky. </summary>
        </member>
        <member name="M:ui.ActionTable.doPresentResult">
            <summary> Prezentuje vysledok akcie pouzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionTable.doFormat(ui.ActionMemento*)">
            <summary> Naformatuje akciu. </summary>
            <param name="memento"> Memento, podla ktoreho sa naformatuje. </param>
        </member>
        <member name="M:ui.ActionTable.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionTable.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionTable.#ctor(System.Int32,System.String,System.Boolean,System.Boolean,ui.ControlsHolder)">
            <summary> Vytvori akciu nad tabulkou. </summary>
            <param name="id"> ID akcie. </param>
            <param name="caption"> Popis akcie. </param>
            <param name="supportsUndo"> Priznak, ci moze byt akcia zvratena. </param>
            <param name="supportsRedo"> Priznak, ci moze byt akcia zopakovana. </param>
            <param name="tableControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionTable">
            <summary> Trieda predstavuje operaciu v tabulke. </summary>
        </member>
        <member name="M:ui.ControlsTable.createActions(System.Collections.Generic.List`1{ui.Action})">
            <summary> Virtualna abstraktna metoda pre vytvorenie akcii ovladajucich udajovu strukturu. </summary>
            <param name="actions"> Zoznam akcii, kam je potrebne nove doregistrovat. </param>
        </member>
        <member name="M:ui.ControlsTable.#ctor">
            <summary> Konstruktor. </summary>
        </member>
        <member name="M:ui.ControlsTable.doVisualizeStructure">
            <summary> Vizualizuje strukturu. </summary>
        </member>
        <member name="M:ui.ControlsTable.doCreatePresentPanel">
            <summary> Predefinovana metoda pre vytvorenie panelu s ovladanim struktury. </summary>
            <returns> Panel s ovladanim zoznamu. </returns>
        </member>
        <member name="T:ui.ControlsTable">
            <summary> Ovladace pre tabulky. </summary>
        </member>
        <member name="F:ui.TableActionMemento.dataAfter_">
            <summary> Stav dat po operacii. </summary>
        </member>
        <member name="F:ui.TableActionMemento.dataBefore_">
            <summary> Stav dat pred operaciou. </summary>
        </member>
        <member name="F:ui.TableActionMemento.key_">
            <summary> Kluc. </summary>
        </member>
        <member name="M:ui.TableActionMemento.#ctor(ui.TableActionMemento!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Kopirovaci konstruktor. </summary>
            <param name="other"> Memento, z ktoreho ma prebrat vlastnosti. </param>
        </member>
        <member name="M:ui.TableActionMemento.#ctor(System.Int32)">
            <summary> Parametricky konstruktor. </summary>
            <param name="actionID"> ID ackie, ktora ho vytvorila. </param>
        </member>
        <member name="T:ui.TableActionMemento">
            <summary> Memento akcii tabuliek. </summary>
        </member>
        <member name="M:ui.PanelPresentTable.InitializeComponent">
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="F:ui.PanelPresentTable.components">
            <summary>
Required designer variable.
</summary>
        </member>
        <member name="M:ui.ActionTreeClear.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionTreeClear.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu vymaz strom. </summary>
            <param name="treeControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionTreeClear">
            <summary> Trieda predstavuje akciu vymaz strom. </summary>
        </member>
        <member name="M:ui.ActionTreeNodeSubtreeSize.doPresentResult">
            <summary> Prezentuje vysledok akcie uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionTreeNodeSubtreeSize.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionTreeNodeSubtreeSize.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionTreeNodeSubtreeSize.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu pocet vrcholov v podstrome. </summary>
            <param name="treeControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionTreeNodeSubtreeSize">
            <summary> Trieda predstavuje operaciu pocet vrcholov v podstrome. </summary>
        </member>
        <member name="M:ui.ActionTreeNodeRemoveSon.doPresentResult">
            <summary> Prezentuje vysledok akcie uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionTreeNodeRemoveSon.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionTreeNodeRemoveSon.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionTreeNodeRemoveSon.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu odstran syna. </summary>
            <param name="treeControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionTreeNodeRemoveSon">
            <summary> Trieda predstavuje operaciu odstran syna. </summary>
        </member>
        <member name="M:ui.ActionTreeNodeInsertSon.doPresentResult">
            <summary> Prezentuje vysledok akcie uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionTreeNodeInsertSon.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionTreeNodeInsertSon.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionTreeNodeInsertSon.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu vloz syna. </summary>
            <param name="treeControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionTreeNodeInsertSon">
            <summary> Trieda predstavuje operaciu vloz syna. </summary>
        </member>
        <member name="M:ui.ActionTreeNodeGetSon.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionTreeNodeGetSon.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionTreeNodeGetSon.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu daj syna. </summary>
            <param name="treeControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionTreeNodeGetSon">
            <summary> Trieda predstavuje operaciu daj syna. </summary>
        </member>
        <member name="M:ui.ActionTreeNodeGetBrother.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionTreeNodeGetBrother.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionTreeNodeGetBrother.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu daj brata. </summary>
            <param name="treeControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionTreeNodeGetBrother">
            <summary> Trieda predstavuje operaciu daj brata. </summary>
        </member>
        <member name="M:ui.ActionTreeNodeGetParent.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionTreeNodeGetParent.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu daj otca. </summary>
            <param name="treeControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionTreeNodeGetParent">
            <summary> Trieda predstavuje operaciu daj otca. </summary>
        </member>
        <member name="M:ui.ActionTreeNodeIsLeaf.doPresentResult">
            <summary> Prezentuje vysledok akcie uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionTreeNodeIsLeaf.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionTreeNodeIsLeaf.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu je uzol stromu list? </summary>
            <param name="treeControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionTreeNodeIsLeaf">
            <summary> Trieda predstavuje operaciu je uzol stromu list? </summary>
        </member>
        <member name="M:ui.ActionTreeNodeIsRoot.doPresentResult">
            <summary> Prezentuje vysledok akcie uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionTreeNodeIsRoot.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionTreeNodeIsRoot.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu je uzol stromu koren? </summary>
            <param name="treeControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionTreeNodeIsRoot">
            <summary> Trieda predstavuje operaciu je uzol stromu koren? </summary>
        </member>
        <member name="M:ui.ActionTreeNodeEdit.doPresentResult">
            <summary> Prezentuje vysledok akcie uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionTreeNodeEdit.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionTreeNodeEdit.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionTreeNodeEdit.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu uprav data v uzle stromu. </summary>
            <param name="treeControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionTreeNodeEdit">
            <summary> Trieda predstavuje operaciu uprav data v uzle stromu. </summary>
        </member>
        <member name="M:ui.ActionTreeCreateNewRoot.doUndo(ui.ActionMemento*)">
            <summary> Zvrati akciu. </summary>
            <param name="memento"> Memento povodnej akcie. </param>
        </member>
        <member name="M:ui.ActionTreeCreateNewRoot.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionTreeCreateNewRoot.doFormat(ui.ActionMemento*)">
            <summary> Naformatuje akciu. </summary>
            <param name="memento"> Memento, podla ktoreho sa naformatuje. </param>
        </member>
        <member name="M:ui.ActionTreeCreateNewRoot.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionTreeCreateNewRoot.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu vytvor koren stromu. </summary>
            <param name="treeControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionTreeCreateNewRoot">
            <summary> Trieda predstavuje operaciu vytvor koren stromu. </summary>
        </member>
        <member name="M:ui.ActionTreeNode.setAttributes(structures.TreeNode&lt;System.Int32&gt;*)">
            <summary> Nastavi do atributov data_ a result_ formatu hodnoty podla vrchola stromu. </summary>
            <param name="resultTreeNode"> Vrchol stromu vrateny operaciou. </param>
        </member>
        <member name="M:ui.ActionTreeNode.doPresentResult">
            <summary> Prezentuje vysledok akcie uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionTreeNode.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionTreeNode.#ctor(System.Int32,System.String,System.Boolean,System.Boolean,ui.ControlsHolder)">
            <summary> Vytvori akciu nad vrcholom stromu. </summary>
            <param name="id"> ID akcie. </param>
            <param name="caption"> Popis akcie. </param>
            <param name="supportsUndo"> Priznak, ci moze byt akcia zvratena. </param>
            <param name="supportsRedo"> Priznak, ci moze byt akcia zopakovana. </param>
            <param name="treeControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionTreeNode">
            <summary> Trieda predstavuje operaciu vo vrchole v strome. </summary>
        </member>
        <member name="M:ui.ActionTree.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionTree.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionTree.#ctor(System.Int32,System.String,System.Boolean,System.Boolean,ui.ControlsHolder)">
            <summary> Vytvori akciu nad stromom. </summary>
            <param name="id"> ID akcie. </param>
            <param name="caption"> Popis akcie. </param>
            <param name="supportsUndo"> Priznak, ci moze byt akcia zvratena. </param>
            <param name="supportsRedo"> Priznak, ci moze byt akcia zopakovana. </param>
            <param name="treeControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionTree">
            <summary> Trieda predstavuje operaciu v strome. </summary>
        </member>
        <member name="M:ui.ControlsTree.createActions(System.Collections.Generic.List`1{ui.Action})">
            <summary> Virtualna abstraktna metoda pre vytvorenie akcii ovladajucich udajovu strukturu. </summary>
            <param name="actions"> Zoznam akcii, kam je potrebne nove doregistrovat. </param>
        </member>
        <member name="M:ui.ControlsTree.#ctor">
            <summary> Konstruktor. </summary>
        </member>
        <member name="M:ui.ControlsTree.doVisualizeStructure">
            <summary> Vizualizuje strukturu. </summary>
        </member>
        <member name="M:ui.ControlsTree.doCreatePresentPanel">
            <summary> Predefinovana metoda pre vytvorenie panelu s ovladanim struktury. </summary>
            <returns> Panel s ovladanim stromu. </returns>
        </member>
        <member name="T:ui.ControlsTree">
            <summary> Ovladace pre stromy. </summary>
        </member>
        <member name="F:ui.TreeActionMemento.dataAfter_">
            <summary> Stav dat po operacii. </summary>
        </member>
        <member name="F:ui.TreeActionMemento.dataBefore_">
            <summary> Stav dat pred operaciou. </summary>
        </member>
        <member name="F:ui.TreeActionMemento.order_">
            <summary> Poradie vrchola. </summary>
        </member>
        <member name="M:ui.TreeActionMemento.#ctor(ui.TreeActionMemento!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Kopirovaci konstruktor. </summary>
            <param name="other"> Memento, z ktoreho ma prebrat vlastnosti. </param>
        </member>
        <member name="M:ui.TreeActionMemento.#ctor(System.Int32)">
            <summary> Parametricky konstruktor. </summary>
            <param name="actionID"> ID ackie, ktora ho vytvorila. </param>
        </member>
        <member name="T:ui.TreeActionMemento">
            <summary> Memento akcii stromov. </summary>
        </member>
        <member name="M:ui.PanelPresentTree.InitializeComponent">
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="F:ui.PanelPresentTree.TreeNodeData.node_">
            <summary> Vrchol stromu. </summary>
        </member>
        <member name="T:ui.PanelPresentTree.TreeNodeData">
            <summary> Obalovaci objekt pre vrchol stromu. </summary>
        </member>
        <member name="M:ui.ActionPriorityQueueClear.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionPriorityQueueClear.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu akciu vyprazdni prioritny front. </summary>
            <param name="priorityQueueControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionPriorityQueueClear">
            <summary> Trieda predstavuje akciu vyprazdni prioritny front. </summary>
        </member>
        <member name="M:ui.ActionPriorityQueuePeekPriority.doPresentRedoResult">
            <summary> Prezentuje vysledok akcie, ktora bola zopakovana, uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionPriorityQueuePeekPriority.doPresentResult">
            <summary> Prezentuje vysledok akcie uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionPriorityQueuePeekPriority.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionPriorityQueuePeekPriority.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionPriorityQueuePeekPriority.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu spristupni prvok s najvacsou prioritou v priortnom fronte. </summary>
            <param name="priorityQueueControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionPriorityQueuePeekPriority">
            <summary> Trieda predstavuje akciu spristupni najvacsiu prioritu v prioritnom fronte. </summary>
        </member>
        <member name="M:ui.ActionPriorityQueuePeek.doPresentRedoResult">
            <summary> Prezentuje vysledok akcie, ktora bola zopakovana, uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionPriorityQueuePeek.doPresentResult">
            <summary> Prezentuje vysledok akcie uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionPriorityQueuePeek.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionPriorityQueuePeek.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionPriorityQueuePeek.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu spristupni prvok s najvacsou prioritou v prioritnom fronte. </summary>
            <param name="priorityQueueControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionPriorityQueuePeek">
            <summary> Trieda predstavuje akciu spristupni prvok s najvacsou prioritou v priortnom fronte. </summary>
        </member>
        <member name="M:ui.ActionPriorityQueuePop.doUndo(ui.ActionMemento*)">
            <summary> Zvrati akciu. </summary>
            <param name="memento"> Memento povodnej akcie. </param>
        </member>
        <member name="M:ui.ActionPriorityQueuePop.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionPriorityQueuePop.doFormat(ui.ActionMemento*)">
            <summary> Naformatuje akciu. </summary>
            <param name="memento"> Memento, podla ktoreho sa naformatuje. </param>
        </member>
        <member name="M:ui.ActionPriorityQueuePop.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionPriorityQueuePop.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu vloz data s danou prioritou do prioritneho frontu. </summary>
            <param name="priorityQueueControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionPriorityQueuePop">
            <summary> Trieda predstavuje akciu odstran prvok s najvacsou prioritou z prioritneho frontu. </summary>
        </member>
        <member name="M:ui.ActionPriorityQueuePush.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionPriorityQueuePush.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionPriorityQueuePush.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu vloz data s danou prioritou do prioritneho frontu. </summary>
            <param name="priorityQueueControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionPriorityQueuePush">
            <summary> Trieda predstavuje akciu vloz data s danou prioritou do prioritneho frontu. </summary>
        </member>
        <member name="F:ui.ActionPriorityQueue.dataEdit_">
            <summary> Editovane data. </summary>
        </member>
        <member name="F:ui.ActionPriorityQueue.priority_">
            <summary> Priorita. </summary>
        </member>
        <member name="M:ui.ActionPriorityQueue.doPresentResult">
            <summary> Prezentuje vysledok akcie pouzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionPriorityQueue.doFormat(ui.ActionMemento*)">
            <summary> Naformatuje akciu. </summary>
            <param name="memento"> Memento, podla ktoreho sa naformatuje. </param>
        </member>
        <member name="M:ui.ActionPriorityQueue.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionPriorityQueue.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionPriorityQueue.#ctor(System.Int32,System.String,System.Boolean,System.Boolean,ui.ControlsHolder)">
            <summary> Vytvori akciu nad prioritnym frontom. </summary>
            <param name="id"> ID akcie. </param>
            <param name="caption"> Popis akcie. </param>
            <param name="supportsUndo"> Priznak, ci moze byt akcia zvratena. </param>
            <param name="supportsRedo"> Priznak, ci moze byt akcia zopakovana. </param>
            <param name="priorityQueueControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionPriorityQueue">
            <summary> Trieda predstavuje operaciu v prioritnom fronte. </summary>
        </member>
        <member name="M:ui.ControlsPriorityQueue.createActions(System.Collections.Generic.List`1{ui.Action})">
            <summary> Virtualna abstraktna metoda pre vytvorenie akcii ovladajucich udajovu strukturu. </summary>
            <param name="actions"> Zoznam akcii, kam je potrebne nove doregistrovat. </param>
        </member>
        <member name="M:ui.ControlsPriorityQueue.#ctor">
            <summary> Konstruktor. </summary>
        </member>
        <member name="M:ui.ControlsPriorityQueue.doVisualizeStructure">
            <summary> Vizualizuje strukturu. </summary>
        </member>
        <member name="M:ui.ControlsPriorityQueue.doCreatePresentPanel">
            <summary> Predefinovana metoda pre vytvorenie panelu s ovladanim struktury. </summary>
            <returns> Panel s ovladanim prioritneho frontu. </returns>
        </member>
        <member name="T:ui.ControlsPriorityQueue">
            <summary> Ovladace pre prioritne fronty. </summary>
        </member>
        <member name="F:ui.PriorityQueueActionMemento.dataAfter_">
            <summary> Stav dat po operacii. </summary>
        </member>
        <member name="F:ui.PriorityQueueActionMemento.dataBefore_">
            <summary> Stav dat pred operaciou. </summary>
        </member>
        <member name="F:ui.PriorityQueueActionMemento.priority_">
            <summary> Priorita. </summary>
        </member>
        <member name="M:ui.PriorityQueueActionMemento.clone">
            <summary> Operacia klonovania. Vytvori a vrati duplikat mementa typu PriorityQueueActionMemento. </summary>
            <returns> Ukazovatel na klon mementa. </returns>
        </member>
        <member name="M:ui.PriorityQueueActionMemento.#ctor(ui.PriorityQueueActionMemento!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Kopirovaci konstruktor. </summary>
            <param name="other"> Memento, z ktoreho ma prebrat vlastnosti. </param>
        </member>
        <member name="M:ui.PriorityQueueActionMemento.#ctor(System.Int32)">
            <summary> Parametricky konstruktor. </summary>
            <param name="actionID"> ID ackie, ktora ho vytvorila. </param>
        </member>
        <member name="T:ui.PriorityQueueActionMemento">
            <summary> Memento akcii prioritnych frontov. </summary>
        </member>
        <member name="M:ui.PanelPresentPriorityQueue.InitializeComponent">
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="F:ui.PanelPresentPriorityQueue.components">
            <summary>
Required designer variable.
</summary>
        </member>
        <member name="T:ui.PanelPresentPriorityQueue">
            <summary>
Summary for PanelPresentPriorityQueue
</summary>
        </member>
        <member name="M:ui.ActionQueueClear.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionQueueClear.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu akciu vyprazdni front. </summary>
            <param name="QueueControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionQueueClear">
            <summary> Trieda predstavuje akciu vyprazdni front. </summary>
        </member>
        <member name="M:ui.ActionQueuePeek.doPresentRedoResult">
            <summary> Prezentuje vysledok akcie, ktora bola zopakovana, uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionQueuePeek.doPresentResult">
            <summary> Prezentuje vysledok akcie uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionQueuePeek.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionQueuePeek.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionQueuePeek.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu spristupni prvok vo fronte. </summary>
            <param name="QueueControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionQueuePeek">
            <summary> Trieda predstavuje akciu spristupni prvok vo fronte. </summary>
        </member>
        <member name="M:ui.ActionQueuePop.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionQueuePop.doFormat(ui.ActionMemento*)">
            <summary> Naformatuje akciu. </summary>
            <param name="memento"> Memento, podla ktoreho sa naformatuje. </param>
        </member>
        <member name="M:ui.ActionQueuePop.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionQueuePop.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu vloz data z frontu. </summary>
            <param name="QueueControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionQueuePop">
            <summary> Trieda predstavuje akciu odstran prvok z frontu. </summary>
        </member>
        <member name="M:ui.ActionQueuePush.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionQueuePush.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionQueuePush.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu vloz data do frontu. </summary>
            <param name="QueueControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionQueuePush">
            <summary> Trieda predstavuje akciu vloz data do frontu. </summary>
        </member>
        <member name="F:ui.ActionQueue.dataEdit_">
            <summary> Editovane data. </summary>
        </member>
        <member name="M:ui.ActionQueue.doPresentResult">
            <summary> Prezentuje vysledok akcie pouzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionQueue.doFormat(ui.ActionMemento*)">
            <summary> Naformatuje akciu. </summary>
            <param name="memento"> Memento, podla ktoreho sa naformatuje. </param>
        </member>
        <member name="M:ui.ActionQueue.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionQueue.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionQueue.#ctor(System.Int32,System.String,System.Boolean,System.Boolean,ui.ControlsHolder)">
            <summary> Vytvori akciu nad frontom. </summary>
            <param name="id"> ID akcie. </param>
            <param name="caption"> Popis akcie. </param>
            <param name="supportsUndo"> Priznak, ci moze byt akcia zvratena. </param>
            <param name="supportsRedo"> Priznak, ci moze byt akcia zopakovana. </param>
            <param name="QueueControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionQueue">
            <summary> Trieda predstavuje operaciu vo fronte. </summary>
        </member>
        <member name="M:ui.ControlsQueue.createActions(System.Collections.Generic.List`1{ui.Action})">
            <summary> Virtualna abstraktna metoda pre vytvorenie akcii ovladajucich udajovu strukturu. </summary>
            <param name="actions"> Zoznam akcii, kam je potrebne nove doregistrovat. </param>
        </member>
        <member name="M:ui.ControlsQueue.#ctor">
            <summary> Konstruktor. </summary>
        </member>
        <member name="M:ui.ControlsQueue.doVisualizeStructure">
            <summary> Vizualizuje strukturu. </summary>
        </member>
        <member name="M:ui.ControlsQueue.doCreatePresentPanel">
            <summary> Predefinovana metoda pre vytvorenie panelu s ovladanim struktury. </summary>
            <returns> Panel s ovladanim frontu. </returns>
        </member>
        <member name="T:ui.ControlsQueue">
            <summary> Ovladace pre fronty. </summary>
        </member>
        <member name="F:ui.QueueActionMemento.dataAfter_">
            <summary> Stav dat po operacii. </summary>
        </member>
        <member name="F:ui.QueueActionMemento.dataBefore_">
            <summary> Stav dat pred operaciou. </summary>
        </member>
        <member name="M:ui.QueueActionMemento.clone">
            <summary> Operacia klonovania. Vytvori a vrati duplikat mementa typu QueueActionMemento. </summary>
            <returns> Ukazovatel na klon mementa. </returns>
        </member>
        <member name="M:ui.QueueActionMemento.#ctor(ui.QueueActionMemento!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Kopirovaci konstruktor. </summary>
            <param name="other"> Memento, z ktoreho ma prebrat vlastnosti. </param>
        </member>
        <member name="M:ui.QueueActionMemento.#ctor(System.Int32)">
            <summary> Parametricky konstruktor. </summary>
            <param name="actionID"> ID ackie, ktora ho vytvorila. </param>
        </member>
        <member name="T:ui.QueueActionMemento">
            <summary> Memento akcii frontov. </summary>
        </member>
        <member name="M:ui.PanelPresentQueue.InitializeComponent">
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="F:ui.PanelPresentQueue.components">
            <summary>
Required designer variable.
</summary>
        </member>
        <member name="T:ui.PanelPresentQueue">
            <summary>
Summary for PanelPresentPriorityQueue
</summary>
        </member>
        <member name="M:ui.ActionStackClear.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionStackClear.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu akciu vyprazdni zasobnik. </summary>
            <param name="StackControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionStackClear">
            <summary> Trieda predstavuje akciu vyprazdni zasobnik. </summary>
        </member>
        <member name="M:ui.ActionStackPeek.doPresentRedoResult">
            <summary> Prezentuje vysledok akcie, ktora bola zopakovana, uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionStackPeek.doPresentResult">
            <summary> Prezentuje vysledok akcie uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionStackPeek.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionStackPeek.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionStackPeek.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu spristupni prvok v zasobniku. </summary>
            <param name="StackControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionStackPeek">
            <summary> Trieda predstavuje akciu spristupni prvok v zasobniku. </summary>
        </member>
        <member name="M:ui.ActionStackPop.doUndo(ui.ActionMemento*)">
            <summary> Zvrati akciu. </summary>
            <param name="memento"> Memento povodnej akcie. </param>
        </member>
        <member name="M:ui.ActionStackPop.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionStackPop.doFormat(ui.ActionMemento*)">
            <summary> Naformatuje akciu. </summary>
            <param name="memento"> Memento, podla ktoreho sa naformatuje. </param>
        </member>
        <member name="M:ui.ActionStackPop.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionStackPop.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu vloz data zo zasobnika. </summary>
            <param name="StackControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionStackPop">
            <summary> Trieda predstavuje akciu odstran prvok zo zasobnika. </summary>
        </member>
        <member name="M:ui.ActionStackPush.doUndo(ui.ActionMemento*)">
            <summary> Zvrati akciu. </summary>
            <param name="memento"> Memento povodnej akcie. </param>
        </member>
        <member name="M:ui.ActionStackPush.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionStackPush.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionStackPush.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu vloz data do zasobnika. </summary>
            <param name="StackControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionStackPush">
            <summary> Trieda predstavuje akciu vloz data do zasobnika. </summary>
        </member>
        <member name="F:ui.ActionStack.dataEdit_">
            <summary> Editovane data. </summary>
        </member>
        <member name="M:ui.ActionStack.doPresentResult">
            <summary> Prezentuje vysledok akcie pouzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionStack.doFormat(ui.ActionMemento*)">
            <summary> Naformatuje akciu. </summary>
            <param name="memento"> Memento, podla ktoreho sa naformatuje. </param>
        </member>
        <member name="M:ui.ActionStack.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionStack.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionStack.#ctor(System.Int32,System.String,System.Boolean,System.Boolean,ui.ControlsHolder)">
            <summary> Vytvori akciu nad zasobnikom. </summary>
            <param name="id"> ID akcie. </param>
            <param name="caption"> Popis akcie. </param>
            <param name="supportsUndo"> Priznak, ci moze byt akcia zvratena. </param>
            <param name="supportsRedo"> Priznak, ci moze byt akcia zopakovana. </param>
            <param name="StackControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionStack">
            <summary> Trieda predstavuje operaciu v zasobniku. </summary>
        </member>
        <member name="M:ui.ControlsStack.createActions(System.Collections.Generic.List`1{ui.Action})">
            <summary> Virtualna abstraktna metoda pre vytvorenie akcii ovladajucich udajovu strukturu. </summary>
            <param name="actions"> Zoznam akcii, kam je potrebne nove doregistrovat. </param>
        </member>
        <member name="M:ui.ControlsStack.#ctor">
            <summary> Konstruktor. </summary>
        </member>
        <member name="M:ui.ControlsStack.doVisualizeStructure">
            <summary> Vizualizuje strukturu. </summary>
        </member>
        <member name="M:ui.ControlsStack.doCreatePresentPanel">
            <summary> Predefinovana metoda pre vytvorenie panelu s ovladanim struktury. </summary>
            <returns> Panel s ovladanim zasobnika. </returns>
        </member>
        <member name="T:ui.ControlsStack">
            <summary> Ovladace pre zasobniky. </summary>
        </member>
        <member name="F:ui.StackActionMemento.dataAfter_">
            <summary> Stav dat po operacii. </summary>
        </member>
        <member name="F:ui.StackActionMemento.dataBefore_">
            <summary> Stav dat pred operaciou. </summary>
        </member>
        <member name="M:ui.StackActionMemento.clone">
            <summary> Operacia klonovania. Vytvori a vrati duplikat mementa typu StackActionMemento. </summary>
            <returns> Ukazovatel na klon mementa. </returns>
        </member>
        <member name="M:ui.StackActionMemento.#ctor(ui.StackActionMemento!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Kopirovaci konstruktor. </summary>
            <param name="other"> Memento, z ktoreho ma prebrat vlastnosti. </param>
        </member>
        <member name="M:ui.StackActionMemento.#ctor(System.Int32)">
            <summary> Parametricky konstruktor. </summary>
            <param name="actionID"> ID ackie, ktora ho vytvorila. </param>
        </member>
        <member name="T:ui.StackActionMemento">
            <summary> Memento akcii zasobnikov. </summary>
        </member>
        <member name="M:ui.PanelPresentStack.InitializeComponent">
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="F:ui.PanelPresentStack.components">
            <summary>
Required designer variable.
</summary>
        </member>
        <member name="T:ui.PanelPresentStack">
            <summary>
Summary for PanelPresentPriorityQueue
</summary>
        </member>
        <member name="M:ui.ActionListClear.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionListClear.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu vymaz zoznam. </summary>
            <param name="listControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionListClear">
            <summary> Trieda predstavuje akciu vymaz zoznam. </summary>
        </member>
        <member name="M:ui.ActionListIndexOf.doPresentRedoResult">
            <summary> Prezentuje vysledok akcie, ktora bola zopakovana, uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionListIndexOf.doPresentResult">
            <summary> Prezentuje vysledok akcie uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionListIndexOf.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionListIndexOf.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionListIndexOf.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu index prvku v zozname. </summary>
            <param name="listControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionListIndexOf">
            <summary> Trieda predstavuje akciu index prvku v zozname. </summary>
        </member>
        <member name="M:ui.ActionListRemoveAtIndex.doPresentRedoResult">
            <summary> Prezentuje vysledok akcie, ktora bola zopakovana, uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionListRemoveAtIndex.doPresentResult">
            <summary> Prezentuje vysledok akcie uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionListRemoveAtIndex.doUndo(ui.ActionMemento*)">
            <summary> Zvrati akciu. </summary>
            <param name="memento"> Memento povodnej akcie. </param>
        </member>
        <member name="M:ui.ActionListRemoveAtIndex.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionListRemoveAtIndex.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionListRemoveAtIndex.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionListRemoveAtIndex.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu odstran zo zoznamu zo zoznamu data na indexe. </summary>
            <param name="listControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionListRemoveAtIndex">
            <summary> Trieda predstavuje akciu odstran zo zoznamu data na indexe. </summary>
        </member>
        <member name="M:ui.ActionListTryToRemove.doPresentRedoResult">
            <summary> Prezentuje vysledok akcie, ktora bola zopakovana, uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionListTryToRemove.doPresentResult">
            <summary> Prezentuje vysledok akcie uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionListTryToRemove.doUndo(ui.ActionMemento*)">
            <summary> Zvrati akciu. </summary>
            <param name="memento"> Memento povodnej akcie. </param>
        </member>
        <member name="M:ui.ActionListTryToRemove.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionListTryToRemove.doFormat(ui.ActionMemento*)">
            <summary> Naformatuje akciu. </summary>
            <param name="memento"> Memento, podla ktoreho sa naformatuje. </param>
        </member>
        <member name="M:ui.ActionListTryToRemove.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionListTryToRemove.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu odstran data zo zoznamu. </summary>
            <param name="listControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionListTryToRemove">
            <summary> Trieda predstavuje akciu odstran data zo zoznamu. </summary>
        </member>
        <member name="M:ui.ActionListEdit.doPresentResult">
            <summary> Prezentuje vysledok akcie uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionListEdit.doUndo(ui.ActionMemento*)">
            <summary> Zvrati akciu. </summary>
            <param name="memento"> Memento povodnej akcie. </param>
        </member>
        <member name="M:ui.ActionListEdit.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionListEdit.doFormat(ui.ActionMemento*)">
            <summary> Naformatuje akciu. </summary>
            <param name="memento"> Memento, podla ktoreho sa naformatuje. </param>
        </member>
        <member name="M:ui.ActionListEdit.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionListEdit.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionListEdit.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu uprav data v zozname. </summary>
            <param name="listControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionListEdit">
            <summary> Trieda predstavuje operaciu uprav data v zozname. </summary>
        </member>
        <member name="M:ui.ActionListInsert.doUndo(ui.ActionMemento*)">
            <summary> Zvrati akciu. </summary>
            <param name="memento"> Memento povodnej akcie. </param>
        </member>
        <member name="M:ui.ActionListInsert.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionListInsert.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionListInsert.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu vloz data do zoznamu na dany index. </summary>
            <param name="listControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionListInsert">
            <summary> Trieda predstavuje akciu vloz data do zoznamu na dany index. </summary>
        </member>
        <member name="M:ui.ActionListAdd.doUndo(ui.ActionMemento*)">
            <summary> Zvrati akciu. </summary>
            <param name="memento"> Memento povodnej akcie. </param>
        </member>
        <member name="M:ui.ActionListAdd.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionListAdd.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionListAdd.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu vloz data na koniec zoznamu. </summary>
            <param name="listControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionListAdd">
            <summary> Trieda predstavuje akciu vloz data na koniec zoznamu. </summary>
        </member>
        <member name="M:ui.ActionList.doFormat(ui.ActionMemento*)">
            <summary> Naformatuje akciu. </summary>
            <param name="memento"> Memento, podla ktoreho sa naformatuje. </param>
        </member>
        <member name="M:ui.ActionList.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionList.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionList.#ctor(System.Int32,System.String,System.Boolean,System.Boolean,ui.ControlsHolder)">
            <summary> Vytvori akciu nad zoznamom. </summary>
            <param name="id"> ID akcie. </param>
            <param name="caption"> Popis akcie. </param>
            <param name="supportsUndo"> Priznak, ci moze byt akcia zvratena. </param>
            <param name="supportsRedo"> Priznak, ci moze byt akcia zopakovana. </param>
            <param name="listControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionList">
            <summary> Trieda predstavuje operaciu v zozname. </summary>
        </member>
        <member name="M:ui.ControlsList.createActions(System.Collections.Generic.List`1{ui.Action})">
            <summary> Virtualna abstraktna metoda pre vytvorenie akcii ovladajucich udajovu strukturu. </summary>
            <param name="actions"> Zoznam akcii, kam je potrebne nove doregistrovat. </param>
        </member>
        <member name="M:ui.ControlsList.#ctor">
            <summary> Konstruktor. </summary>
        </member>
        <member name="M:ui.ControlsList.doVisualizeStructure">
            <summary> Vizualizuje strukturu. </summary>
        </member>
        <member name="M:ui.ControlsList.doCreatePresentPanel">
            <summary> Predefinovana metoda pre vytvorenie panelu s ovladanim struktury. </summary>
            <returns> Panel s ovladanim zoznamu. </returns>
        </member>
        <member name="T:ui.ControlsList">
            <summary> Ovladace pre zoznamy. </summary>
        </member>
        <member name="F:ui.ListActionMemento.dataAfter_">
            <summary> Stav dat po operacii. </summary>
        </member>
        <member name="F:ui.ListActionMemento.dataBefore_">
            <summary> Stav dat pred operaciou. </summary>
        </member>
        <member name="F:ui.ListActionMemento.index_">
            <summary> Index dat. </summary>
        </member>
        <member name="M:ui.ListActionMemento.#ctor(ui.ListActionMemento!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Kopirovaci konstruktor. </summary>
            <param name="other"> Memento, z ktoreho ma prebrat vlastnosti. </param>
        </member>
        <member name="M:ui.ListActionMemento.#ctor(System.Int32)">
            <summary> Parametricky konstruktor. </summary>
            <param name="actionID"> ID ackie, ktora ho vytvorila. </param>
        </member>
        <member name="T:ui.ListActionMemento">
            <summary> Memento akcii zoznamov. </summary>
        </member>
        <member name="M:ui.PanelPresentList.InitializeComponent">
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="F:ui.PanelPresentList.components">
            <summary>
Required designer variable.
</summary>
        </member>
        <member name="M:ui.ActionArrayEdit.doPresentResult">
            <summary> Prezentuje vysledok akcie uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionArrayEdit.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionArrayEdit.doFormat(ui.ActionMemento*)">
            <summary> Naformatuje akciu. </summary>
            <param name="memento"> Memento, podla ktoreho sa naformatuje. </param>
        </member>
        <member name="M:ui.ActionArrayEdit.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionArrayEdit.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu uprav data v poli. </summary>
            <param name="arrayControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionArrayEdit">
            <summary> Trieda predstavuje operaciu uprav data v poli. </summary>
        </member>
        <member name="M:ui.ActionArray.doUndo(ui.ActionMemento*)">
            <summary> Zvrati akciu. </summary>
            <param name="memento"> Memento povodnej akcie. </param>
        </member>
        <member name="M:ui.ActionArray.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionArray.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionArray.#ctor(System.Int32,System.String,System.Boolean,System.Boolean,ui.ControlsHolder)">
            <summary> Vytvori akciu nad polom. </summary>
            <param name="id"> ID akcie. </param>
            <param name="caption"> Popis akcie. </param>
            <param name="supportsUndo"> Priznak, ci moze byt akcia zvratena. </param>
            <param name="supportsRedo"> Priznak, ci moze byt akcia zopakovana. </param>
            <param name="arrayControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionArray">
            <summary> Trieda predstavuje operaciu v poli. </summary>
        </member>
        <member name="M:ui.ControlsArray.createActions(System.Collections.Generic.List`1{ui.Action})">
            <summary> Virtualna abstraktna metoda pre vytvorenie akcii ovladajucich udajovu strukturu. </summary>
            <param name="actions"> Zoznam akcii, kam je potrebne nove doregistrovat. </param>
        </member>
        <member name="M:ui.ControlsArray.#ctor">
            <summary> Konstruktor. </summary>
        </member>
        <member name="M:ui.ControlsArray.doVisualizeStructure">
            <summary> Vizualizuje strukturu. </summary>
        </member>
        <member name="M:ui.ControlsArray.doCreatePresentPanel">
            <summary> Predefinovana metoda pre vytvorenie panelu s ovladanim struktury. </summary>
            <returns> Panel s ovladanim pola. </returns>
        </member>
        <member name="T:ui.ControlsArray">
            <summary> Ovladace pre polia. </summary>
        </member>
        <member name="F:ui.ArrayActionMemento.dataAfter_">
            <summary> Stav dat po operacii. </summary>
        </member>
        <member name="F:ui.ArrayActionMemento.dataBefore_">
            <summary> Stav dat pred operaciou. </summary>
        </member>
        <member name="F:ui.ArrayActionMemento.index_">
            <summary> Index dat. </summary>
        </member>
        <member name="M:ui.ArrayActionMemento.#ctor(ui.ArrayActionMemento!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Kopirovaci konstruktor. </summary>
            <param name="other"> Memento, z ktoreho ma prebrat vlastnosti. </param>
        </member>
        <member name="M:ui.ArrayActionMemento.#ctor(System.Int32)">
            <summary> Parametricky konstruktor. </summary>
            <param name="actionID"> ID ackie, ktora ho vytvorila. </param>
        </member>
        <member name="T:ui.ArrayActionMemento">
            <summary> Memento akcii poli. </summary>
        </member>
        <member name="M:ui.PanelPresentArray.InitializeComponent">
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="M:ui.ActionVectorByteEdit.internalExecute">
            <summary> Vykona akciu. </summary>
        </member>
        <member name="M:ui.ActionVectorByteEdit.doFormat(ui.ActionMemento*)">
            <summary> Naformatuje akciu. </summary>
            <param name="memento"> Memento, podla ktoreho sa naformatuje. </param>
        </member>
        <member name="M:ui.ActionVectorByteEdit.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionVectorByteEdit.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu uprav byte vo vektore. </summary>
            <param name="vectorControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionVectorByteEdit">
            <summary> Trieda predstavuje operaciu uprav data vo vektore. </summary>
        </member>
        <member name="M:ui.ActionVectorByteSHR.internalExecute">
            <summary> Vykona akciu. </summary>
        </member>
        <member name="M:ui.ActionVectorByteSHR.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu SHR nad vektorom. </summary>
            <param name="vectorControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionVectorByteSHR">
            <summary> Trieda predstavuje operaciu posun byte vo vektore doprava. </summary>
        </member>
        <member name="M:ui.ActionVectorByteSHL.internalExecute">
            <summary> Vykona akciu. </summary>
        </member>
        <member name="M:ui.ActionVectorByteSHL.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu SHL nad vektorom. </summary>
            <param name="vectorControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionVectorByteSHL">
            <summary> Trieda predstavuje operaciu posun byte vo vektore dolava. </summary>
        </member>
        <member name="M:ui.ActionVectorByteXOR.internalExecute">
            <summary> Vykona akciu. </summary>
        </member>
        <member name="M:ui.ActionVectorByteXOR.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu XOR byte nad vektorom. </summary>
            <param name="vectorControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionVectorByteXOR">
            <summary> Trieda predstavuje operaciu xor byte vo vektore. </summary>
        </member>
        <member name="M:ui.ActionVectorByteReset.internalExecute">
            <summary> Vykona akciu. </summary>
        </member>
        <member name="M:ui.ActionVectorByteReset.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu reset byte nad vektorom. </summary>
            <param name="vectorControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionVectorByteReset">
            <summary> Trieda predstavuje operaciu zrus byte vo vektore. </summary>
        </member>
        <member name="M:ui.ActionVectorByteSet.internalExecute">
            <summary> Vykona akciu. </summary>
        </member>
        <member name="M:ui.ActionVectorByteSet.#ctor(ui.ControlsHolder)">
            <summary> Vytvori akciu set byte nad vektorom. </summary>
            <param name="vectorControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionVectorByteSet">
            <summary> Trieda predstavuje operaciu nastav byte vo vektore. </summary>
        </member>
        <member name="M:ui.ActionVector.doUndo(ui.ActionMemento*)">
            <summary> Zvrati akciu. </summary>
            <param name="memento"> Memento povodnej akcie. </param>
        </member>
        <member name="M:ui.ActionVector.doPresentResult">
            <summary> Prezentuje vysledok akcie uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionVector.internalExecute">
            <summary> Vykona akciu. </summary>
        </member>
        <member name="M:ui.ActionVector.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
        </member>
        <member name="M:ui.ActionVector.doFormat(ui.ActionMemento*)">
            <summary> Naformatuje akciu. </summary>
            <param name="memento"> Memento, podla ktoreho sa naformatuje. </param>
        </member>
        <member name="M:ui.ActionVector.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionVector.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
        </member>
        <member name="M:ui.ActionVector.#ctor(System.Int32,System.String,System.Boolean,System.Boolean,ui.ControlsHolder)">
            <summary> Vytvori akciu nad vektorom. </summary>
            <param name="id"> ID akcie. </param>
            <param name="caption"> Popis akcie. </param>
            <param name="supportsUndo"> Priznak, ci moze byt akcia zvratena. </param>
            <param name="supportsRedo"> Priznak, ci moze byt akcia zopakovana. </param>
            <param name="vectorControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionVector">
            <summary> Trieda predstavuje operaciu vo vektore. </summary>
        </member>
        <member name="M:ui.ControlsVector.createActions(System.Collections.Generic.List`1{ui.Action})">
            <summary> Virtualna abstraktna metoda pre vytvorenie akcii ovladajucich udajovu strukturu. </summary>
            <param name="actions"> Zoznam akcii, kam je potrebne nove doregistrovat. </param>
        </member>
        <member name="M:ui.ControlsVector.#ctor">
            <summary> Konstruktor. </summary>
        </member>
        <member name="M:ui.ControlsVector.doVisualizeStructure">
            <summary> Vizualizuje strukturu. </summary>
        </member>
        <member name="M:ui.ControlsVector.doCreatePresentPanel">
            <summary> Predefinovana metoda pre vytvorenie panelu s ovladanim struktury. </summary>
            <returns> Panel s ovladanim vektora. </returns>
        </member>
        <member name="T:ui.ControlsVector">
            <summary> Ovladace pre vektory. </summary>
        </member>
        <member name="F:ui.VectorActionMemento.byteAfter_">
            <summary> Stav bytu po operacii. </summary>
        </member>
        <member name="F:ui.VectorActionMemento.byteBefore_">
            <summary> Stav bytu pred operaciou. </summary>
        </member>
        <member name="F:ui.VectorActionMemento.index_">
            <summary> Index bytu. </summary>
        </member>
        <member name="M:ui.VectorActionMemento.#ctor(ui.VectorActionMemento!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Kopirovaci konstruktor. </summary>
            <param name="other"> Memento, z ktoreho ma prebrat vlastnosti. </param>
        </member>
        <member name="M:ui.VectorActionMemento.#ctor(System.Int32)">
            <summary> Parametricky konstruktor. </summary>
            <param name="actionID"> ID ackie, ktora ho vytvorila. </param>
        </member>
        <member name="T:ui.VectorActionMemento">
            <summary> Memento akcii vektorov. </summary>
        </member>
        <member name="M:ui.PanelPresentVector.InitializeComponent">
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="F:structures.Dijkstra.dijkstraDataKey_">
            <summary> Jednoznacny identifikator dat ukladanych vo vrchole grafu, ktore vyzaduje Dijkstrov algoritmus. </summary>
        </member>
        <member name="F:structures.Dijkstra.endVertex_">
            <summary> Smernik na vrchol, do ktoreho hladame najkratsiu cestu. </summary>
        </member>
        <member name="F:structures.Dijkstra.beginVertex_">
            <summary> Smernik na vrchol, z ktoreho hladame najkratsiu cestu. </summary>
        </member>
        <member name="F:structures.Dijkstra.vertices_">
            <summary> Zonam vrcholov grafu, nad ktorym sa spusti Dijkstrov algoritmus. </summary>
        </member>
        <member name="F:structures.Dijkstra.lengthKey_">
            <summary> Jednoznacny identifikator dat obsahujucich informaciu o dlzke hrany. </summary>
        </member>
        <member name="F:structures.Dijkstra.graph_">
            <summary> Smernik na graf, nad ktorym su spusti Dijkstrov algoritmus. </summary>
        </member>
        <member name="M:structures.Dijkstra.getEdgeLength(structures.GraphEdge!System.Runtime.CompilerServices.IsConst*)">
            <summary> Pomocna metoda, ktora vrati dlzku danej hrany. </summary>
            <param name="edge"> Hrana, ktorej dlzku chceme zistit. </param>
            <returns> Dlzka danej hrany. </returns>
        </member>
        <member name="M:structures.Dijkstra.getDijkstraData(structures.GraphVertex*)">
            <summary> Pomocna metoda, ktora vrati pre dany vrchol data potrebne pre cinnost Dijkstrovho algoritmu. </summary>
            <param name="vertex"> Vrchol, pre ktory chceme ziskat data potrebne pre cinnost Dijkstrovho algoritmu. </param>
            <returns> Smernik na data potrebne pre cinnost Dijkstrovho algoritmu. </returns>
        </member>
        <member name="M:structures.Dijkstra.findNewPivot">
            <summary> 
Pomocna metoda Dijkstrovho algoritmu, ktora vyhlada pivota medzi vrcholmi,
ktore este nie su oznacene ako definitivne.
</summary>
            <returns> Smernik na vrchol predstavujuci noveho pivota. </returns>
        </member>
        <member name="M:structures.Dijkstra.getComputedPath(structures.List&lt;structures.GraphEdge**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adresou vrati zoznam (postupnost) hran, ktore tvoria najkratsiu cestu vypocitanu metodou tryCompute(). </summary>
            <param name="path"> Referencia na zoznam, do ktoreho sa vlozia smerniky na hrany tvoriace najkratsiu cestu. </param>
            <returns> Adresa, na ktorej sa nachadza zoznam naplneny smernikmi na hrany tvoriace najkratsiu cestue. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak metoda tryCompute() este nebola volana. </exception>
            <remarks> Navratova hodnota sa zhoduje s adresou, na ktorej sa nachadza argument path. </remarks>
        </member>
        <member name="M:structures.Dijkstra.getComputedDistance">
            <summary> Getter vracajuci dlzku najkratsej cesty vypocitanej metodou tryCompute(). </summary>
            <returns> Dlzka najkratsej cety. Ak cesta medzi vrcholmi neexistuje, metoda vrati hodnotu nekonecno. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak metoda tryCompute() este nebola volana. </exception>
        </member>
        <member name="M:structures.Dijkstra.tryCompute(System.Int32,System.Int32)">
            <summary> Metoda vypocita najkratsiu cestu medzi danymi vrcholmi. </summary>
            <param name="startVertexId"> Id zaciatocneho vrcholu. </param>
            <param name="stopVertexId"> Id koncoveho vrcholu. </param>
            <returns> true, ak cesta existuje, false inak. </returns>
        </member>
        <member name="M:structures.Dijkstra.op_Assign(structures.Dijkstra!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Explicitne zakazanie operatora priradenia. </summary>
            <remarks> Nad instanciou triedy Dijkstra nie je mozne definovat operator priradenia. </remarks>
        </member>
        <member name="M:structures.Dijkstra.Dispose">
            <summary> Destruktor. </summary>
        </member>
        <member name="M:structures.Dijkstra.#ctor(structures.Dijkstra!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Explicitne zakazanie kopirovacieho konstruktora. </summary>
        </member>
        <member name="M:structures.Dijkstra.#ctor(structures.Graph*,structures.GraphDataLength!System.Runtime.CompilerServices.IsConst*)">
            <summary> Konstruktor. </summary>
            <param name="graph"> Graf, nad ktorym bude bezat Dijkstrov algoritmus. </param>
            <param name="lengthKey">
Jednoznacny identifikator dat obsahujucich informaciu o dlzke hrany.
Jedna sa u adresu triedy GraphDataLength alebo triedy z nej odvodenej.
</param>
        </member>
        <member name="F:structures.Dijkstra.GraphDataDijkstraVertex.definitive_">
            <summary> Priznak indikujuci, ci bol dany vrchol oznaceny za definitivny. </summary>
            <remarks> Ak je vrchol oznaceny za definitivny, atributy predecessor_ a distance_ maju konecnu hodnotu. </remarks>
        </member>
        <member name="F:structures.Dijkstra.GraphDataDijkstraVertex.distance_">
            <summary> Vzdialenost daneho vrcholu od vrcholu, z ktoreho hladame najkratsiu cestu. </summary>
        </member>
        <member name="F:structures.Dijkstra.GraphDataDijkstraVertex.predecessor_">
            <summary> Smernik na predchodcu. </summary>
            <remarks> Sluzi na zrekonstruovanie najkratsej cesty najdenej Dijkstrovym algoritmom. </remarks>
        </member>
        <member name="F:structures.Dijkstra.GraphDataDijkstraVertex.classKey_">
            <summary> Objekt predstavujuci jednoznacny identifikator triedy GraphDataDijkstraVertex. </summary>
            <remarks> Pod jednoznacnym identifikatorom sa rozumie adresa objektu classKey_. </remarks>
        </member>
        <member name="M:structures.Dijkstra.GraphDataDijkstraVertex.setDefinitive(System.Boolean)">
            <summary> Setter nastavujuci atribut indikujici, ci je vrchol definitivny. </summary>
            <param name="definitive"> Hodnota, na ktoru sa nastavi atribut indikujuci definitivnost. </param>
        </member>
        <member name="M:structures.Dijkstra.GraphDataDijkstraVertex.isDefinitive">
            <summary> Getter vracajuci atribut indikujuci, ci bol vrchol oznaceny za definitivny. </summary>
            <returns> Hodnota atributu indikujuceho definitivnost. </returns>
        </member>
        <member name="M:structures.Dijkstra.GraphDataDijkstraVertex.setDistance(System.Double)">
            <summary> Setter nastavujuci atribut vzdialenost. </summary>
            <param name="distance"> Hodnota, na ktoru sa nastavi atribut vzdialenost. </param>
        </member>
        <member name="M:structures.Dijkstra.GraphDataDijkstraVertex.getDistance">
            <summary> Getter vracajuci atribut vzdialenost. </summary>
            <returns> Hodnota atributu vzdialenost. </returns>
        </member>
        <member name="M:structures.Dijkstra.GraphDataDijkstraVertex.setPredecessor(structures.GraphVertex*)">
            <summary> Setter nastavujuci atribut predchodca. </summary>
            <param name="predecessor"> Hodnota, na ktoru sa nastavi atribut predchodca. </param>
        </member>
        <member name="M:structures.Dijkstra.GraphDataDijkstraVertex.getPredecessor">
            <summary> Getter vracajuci atribut predchodca. </summary>
            <returns> Hodnota atributu predchodca. </returns>
        </member>
        <member name="M:structures.Dijkstra.GraphDataDijkstraVertex.reset">
            <summary> Resetne data na defaultne hodnoty. </summary>
        </member>
        <member name="M:structures.Dijkstra.GraphDataDijkstraVertex.op_Assign(structures.Dijkstra.GraphDataDijkstraVertex!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Data, z ktorych ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa tieto data nachadzaju po priradeni. </returns>
        </member>
        <member name="M:structures.Dijkstra.GraphDataDijkstraVertex.getClassKey">
            <summary> Getter vracajuci jedinecny identifikator triedy GraphDataDijkstraVertex. </summary>
            <returns> Adresa, na ktorej je "ulozena" trieda GraphDataDijkstraVertex. </returns>
        </member>
        <member name="M:structures.Dijkstra.GraphDataDijkstraVertex.clone">
            <summary> Operacia klonovania. Vytvori a vrati duplikat dat. </summary>
            <returns> Ukazovatel na klon dat. </returns>
        </member>
        <member name="M:structures.Dijkstra.GraphDataDijkstraVertex.op_Assign(structures.GraphData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Data, z ktorych ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa tieto data nachadzaju po priradeni. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak vstupny parameter nie je typu GraphDataDijkstraVertex. </exception>
            <remarks> Vyuziva typovy operator priradenia. </remarks>
        </member>
        <member name="M:structures.Dijkstra.GraphDataDijkstraVertex.#ctor(structures.Dijkstra.GraphDataDijkstraVertex!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Kopirovaci konstruktor. </summary>
            <param name="other"> Data typu GraphDataDijkstraVertex, z ktorych sa prevezmu vlastnosti. </param>
        </member>
        <member name="M:structures.Dijkstra.GraphDataDijkstraVertex.#ctor">
            <summary> Konstruktor. </summary>
        </member>
        <member name="T:structures.Dijkstra.GraphDataDijkstraVertex">
            <summary> Data ukladane vo vrchole grafu, ktore vyzaduje Dijkstrov algoritmus. </summary>
        </member>
        <member name="T:structures.Dijkstra">
            <summary> Dijkstrov algoritmus. </summary>
        </member>
        <member name="M:ui.PanelLogger.InitializeComponent">
            <summary>
Required designer variable.
</summary>
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="M:ui.PanelLogger.log(ui.log.LogType,System.String)">
            <summary> Zaloguje spravu daneho typu. </summary>
            <param name="lt"> Typ spravy. </param>
            <param name="message"> Sprava. </param>
        </member>
        <member name="M:ui.PanelLogger.createAndIntegrateLogger(System.Windows.Forms.Panel)">
            <summary> Vytvori a vlozi logger do daneho komponentu. </summary>
            <param name="owner"> Vlastnik panela s logerom. Mal by to byt iny prazdny panel. </param>
            <returns> Vytvoreny logger. </returns>
        </member>
        <member name="T:ui.PanelLogger">
            <summary>
Definuje panel, do ktoreho je mozne logovat.
Panel sa pri vytvoreni automaticky zaregistruje ako LoggerProvider.
Pri zruseni panela sa automaticky odregistruje.
</summary>
        </member>
        <member name="M:ui.PanelStructures.InitializeComponent">
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="M:ui.PanelStructures.createStructure(System.Int32,System.Boolean)">
            <summary> Vytvori novu strukturu podla aktualneho stavu rozhrania. </summary>
            <param name="cloneIndex"> Ak je aspon 0, tak novu strukturu spravi ako klon struktury na danom indexe. </param>
            <param name="selectIt"> Ak je true, vytvorena struktura bude vybrana. </param>
        </member>
        <member name="M:ui.PanelStructures.updateControls">
            <summary> Aktualizuje ovladacie prvky. </summary>
        </member>
        <member name="F:ui.PanelStructures.control_">
            <summary> Ovladanie rozhrania. </summary>
        </member>
        <member name="F:ui.PanelStructures.adtManager_">
            <summary> ADTFactoryManager, s ktorym panel spolupracuje. </summary>
        </member>
        <member name="M:ui.PanelStructures.Dispose">
            <summary> Destruktor. </summary>
        </member>
        <member name="M:ui.PanelStructures.initialize(structures.StructureADT!System.Runtime.CompilerServices.IsConst)">
            <summary> Inicializuje panel pre ovladanie konkretneho ADT. </summary>
            <param name="adt"> ADT struktur, ktory bude tento panel ovladat. </param>
            <remarks> Je automaticky volana z metody createAndIntegratePanelStructures. </remarks>
        </member>
        <member name="M:ui.PanelStructures.#ctor">
            <summary> Chraneny konstruktor umoznuje vytvarat instance iba pomocou metody createAndIntegratePanelStructures. </summary>
        </member>
        <member name="M:ui.PanelStructures.createAndIntegratePanelStructures(System.Windows.Forms.Panel,structures.StructureADT)">
            <summary> Vytvori a vlozi panel pre ovladanie struktur do daneho komponentu. </summary>
            <param name="owner"> Vlastnik panela so strukturami. Mal by to byt iny prazdny panel. </param>
            <param name="adt"> ADT struktur, ktory bude tento panel ovladat. </param>
            <returns> Vytvoreny panel pre ovladanie struktur. </returns>
        </member>
        <member name="F:ui.PanelStructures.StructureItemData.structure_">
            <summary> Struktura. </summary>
        </member>
        <member name="T:ui.PanelStructures.StructureItemData">
            <summary> Obalovaci objekt pre strukturu. </summary>
        </member>
        <member name="M:ui.ActionStructureIsEmpty.doPresentRedoResult">
            <summary> Prezentuje vysledok akcie, ktora bola zopakovana, uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionStructureIsEmpty.doPresentResult">
            <summary> Prezentuje vysledok akcie uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionStructureIsEmpty.doExecute">
            <summary> Vykona akciu. </summary>
        </member>
        <member name="M:ui.ActionStructureIsEmpty.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionStructureIsEmpty.#ctor(System.Int32,ui.ControlsHolder)">
            <summary> Vytvori akciu zisti, ci je struktura prazdna. </summary>
            <param name="id"> ID akcie. </param>
            <param name="structureControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionStructureIsEmpty">
            <summary> Trieda predstavuje operaciu zisti, ci je struktura prazdna. </summary>
        </member>
        <member name="M:ui.ActionStructureSize.doPresentRedoResult">
            <summary> Prezentuje vysledok akcie, ktora bola zopakovana, uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionStructureSize.doPresentResult">
            <summary> Prezentuje vysledok akcie uzivatelovi. </summary>
        </member>
        <member name="M:ui.ActionStructureSize.doExecute">
            <summary> Vykona akciu. </summary>
        </member>
        <member name="M:ui.ActionStructureSize.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
        </member>
        <member name="M:ui.ActionStructureSize.#ctor(System.Int32,ui.ControlsHolder)">
            <summary> Vytvori akciu zisti velkost struktury. </summary>
            <param name="id"> ID akcie. </param>
            <param name="structureControls"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.ActionStructureSize">
            <summary> Trieda predstavuje operaciu zisti velkost struktury. </summary>
        </member>
        <member name="F:ui.Action.timer_">
            <summary> Merac casu. </summary>
        </member>
        <member name="F:ui.Action.controls_">
            <summary> Vsetky ovladacie prvky spojene s touto akciou. </summary>
        </member>
        <member name="F:ui.Action.controlsHolder_">
            <summary> Ovladaci panel so strukturou. </summary>
        </member>
        <member name="F:ui.Action.supportsRedo_">
            <summary> Priznak, ci moze byt akcia zopakovana. </summary>
        </member>
        <member name="F:ui.Action.supportsUndo_">
            <summary> Priznak, ci moze byt akcia zvratena. </summary>
        </member>
        <member name="F:ui.Action.enabled_">
            <summary> Priznak, ci je akcia povolena. </summary>
        </member>
        <member name="F:ui.Action.caption_">
            <summary> Popis akcie. </summary>
        </member>
        <member name="F:ui.Action.id_">
            <summary> ID akcie. </summary>
        </member>
        <member name="M:ui.Action.doPresentUndoResult">
            <summary> Prezentuje vysledok akcie, ktora bola zvratena, uzivatelovi. </summary>
            <remarks> Necha vypisat strukturu. Prekrytelna metoda (krok 2) sablonovej metody undo(). Ak je to potrebne, moze merat cas. </remarks>
        </member>
        <member name="M:ui.Action.doPresentRedoResult">
            <summary> Prezentuje vysledok akcie, ktora bola zopakovana, uzivatelovi. </summary>
            <remarks> Necha vypisat strukturu. Prekrytelna metoda (krok 3) sablonovej metody redo(). Ak je to potrebne, moze merat cas. </remarks>
        </member>
        <member name="M:ui.Action.doPresentResult">
            <summary> Prezentuje vysledok akcie uzivatelovi. </summary>
            <remarks> Necha vypisat strukturu. Prekrytelna metoda (krok 3) sablonovej metody execute(). Ak je to potrebne, moze merat cas. </remarks>
        </member>
        <member name="M:ui.Action.doUndo(ui.ActionMemento*)">
            <summary> Zvrati akciu. </summary>
            <param name="memento"> Memento povodnej akcie. </param>
            <remarks> Abstraktna metoda (krok 1) sablonovej metody undo(). </remarks>
        </member>
        <member name="M:ui.Action.doExecute">
            <summary> Vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
            <remarks> Abstraktna metoda (krok 2) sablonovej metody execute(). Cas trvania je automaticky merany. </remarks>
        </member>
        <member name="M:ui.Action.doFormat(ui.ActionMemento*)">
            <summary> Naformatuje akciu. </summary>
            <param name="memento"> Memento, podla ktoreho sa naformatuje. </param>
            <remarks> 
Krok 1 sablonovej metody redo().
Ak je to potrebne, moze merat cas.
</remarks>
        </member>
        <member name="M:ui.Action.doFormat">
            <summary> Naformatuje akciu. </summary>
            <returns> true, ak sa akciu podarilo naformatovat, false inak. </returns>
            <remarks> 
Krok 1 sablonovej metody execute().
Ak je to potrebne, moze merat cas.
</remarks>
        </member>
        <member name="M:ui.Action.doCreateMementoInstance">
            <summary> Vrati instanciu mementa. </summary>
            <returns> Memento uchovavajuce data potrebne pre rekonstrukciu akcie (undo aj redo). </returns>
            <remarks> Volana v konstruktore. </remarks>
        </member>
        <member name="M:ui.Action.canBeEnabled">
            <summary> Vrati priznak, ci moze byt akcia povolena. </summary>
            <returns> Priznak, ci moze byt akcia povolena. </returns>
            <remarks> Defult true. </remarks>
        </member>
        <member name="M:ui.Action.createButton(System.Windows.Forms.Control)">
            <summary> Vytvori tlacitko a napoji sa ako jeho akcia po kliknuti </summary>
            <param name="owner"> Prvok, ktory bude obsahovat vytvorene tlacitko. </param>
            <returns> Vytvorrene tlacitko. </returns>
        </member>
        <member name="M:ui.Action.tryEnable">
            <summary> Pokusi sa povolit akciu. </summary>
            <remarks> Vyuziva metodu canBeEnabled. </remarks>
        </member>
        <member name="M:ui.Action.undo(ui.ActionMemento*)">
            <summary> Bezpecne zvrati akciu. </summary>
            <param name="memento"> Memento povodnej akcie. </param>
            <remarks> 
Sprava sa ako sablonova metoda (vzor template method):
  1) Zvrati akciu. (abstraktna metoda)
  2) Prezentuje uzivatelovi vysledok akcie. (prekrytelna metoda)
  3) Vynesie do rozhrania informaciu o trvani. (neprekrytelna metoda)
</remarks>
        </member>
        <member name="M:ui.Action.redo(ui.ActionMemento*,System.Boolean)">
            <summary> Bezpecne zopakuje akciu s danymi nastaveniami. </summary>
            <param name="memento"> Memento povodnej akcie. </param>
            <param name="interact"> Ak je parameter nastaveny, tak bude interagovat s pouzivatelom. </param>
            <returns> Memento vykonanej akcie. Ak je parameter interact nastaveny na false, vrati nullptr. </returns>
            <remarks> 
Sprava sa ako sablonova metoda (vzor template method):
  1) Obnovi vnutorny stav akcie. (prekrytelna metoda)
  2) Znovu vykona ackiu, ktorej memento vrati. (abstraktna metoda)
  == Ak je nastaveny parmeter interact, vykona nasledujuce kroky ==
  3) Znovu prezentuje strukturu. (prekrytelna metoda)
  4) Vynesie do rozhrania:
     a) informaciu o trvani. (logger) 
     b) informaciu o vykonani akcie. (historia)
     c) informaciu o vykone. (graf)
</remarks>
        </member>
        <member name="M:ui.Action.execute">
            <summary> Bezpecne vykona akciu. </summary>
            <returns> Memento vykonanej akcie. </returns>
            <remarks> 
Sprava sa ako sablonova metoda (vzor template method):
  1) Naformatuje akciu. Ak sa akciu nepodari naformatovat, skonci. (prekrytelna metoda)
  2) Vykona akciu, ktorej memento vrati. (abstraktna metoda)
  3) Prezentuje uzivatelovi vysledok akcie. (prekrytelna metoda)
  4) Vynesie do rozhrania:
     a) informaciu o trvani. (logger) 
     b) informaciu o vykonani akcie. (historia)
     c) informaciu o vykone. (graf)
</remarks>
        </member>
        <member name="M:ui.Action.Finalize">
            <summary> Finalizer. </summary>
        </member>
        <member name="M:ui.Action.Dispose">
            <summary> Destruktor. </summary>
        </member>
        <member name="M:ui.Action.#ctor(System.Int32,System.String,System.Boolean,System.Boolean,ui.ControlsHolder)">
            <summary> Vytvori akciu. </summary>
            <param name="id"> ID akcie. </param>
            <param name="caption"> Popis akcie. </param>
            <param name="supportsUndo"> Priznak, ci moze byt akcia zvratena. </param>
            <param name="supportsRedo"> Priznak, ci moze byt akcia zopakovana. </param>
            <param name="controlsHolder"> Ovladanie, do ktoreho patri. </param>
        </member>
        <member name="T:ui.Action">
            <summary>
Trieda zastresujuca operaciu s udajovou strukturou.
Je navrhnuta podla vzoru Command.
</summary>
        </member>
        <member name="F:ui.ControlsHolder.lock_">
            <summary> Zamok pre ovladacie prvky. </summary>
        </member>
        <member name="F:ui.ControlsHolder.panelControls_">
            <summary> Panel s rozlozenim ovladania. </summary>
        </member>
        <member name="F:ui.ControlsHolder.actions_">
            <summary> Akcie. </summary>
        </member>
        <member name="F:ui.ControlsHolder.structure_">
            <summary> Aktualne spravovana udajova strutura. </summary>
        </member>
        <member name="F:ui.ControlsHolder.adt_">
            <summary> ADT ovladanych struktur. </summary>
        </member>
        <member name="M:ui.ControlsHolder.doVisualizeStructure">
            <summary> Vizualizuje strukturu. </summary>
        </member>
        <member name="M:ui.ControlsHolder.doCreatePresentPanel">
            <summary> Virtualna abstraktna metoda pre vytvorenie panelu s ovladanim struktury. </summary>
            <returns> Panel s ovladanim struktury. </returns>
        </member>
        <member name="M:ui.ControlsHolder.enableControls">
            <summary> Aktualizuje ovladacie prvky na panely. </summary>
        </member>
        <member name="M:ui.ControlsHolder.createActions(System.Collections.Generic.List`1{ui.Action})">
            <summary> Virtualna abstraktna metoda pre vytvorenie akcii ovladajucich udajovu strukturu. </summary>
            <param name="actions"> Zoznam akcii, kam je potrebne nove doregistrovat. </param>
        </member>
        <member name="M:ui.ControlsHolder.getAction(System.Int32)">
            <summary> Vrati akciu podla jej ID. </summary>
            <param name="actionID"> ID akcie. </param>
            <returns> Akciu s danym ID. Ak neexistuje, vrati nullptr. </returns>
        </member>
        <member name="M:ui.ControlsHolder.hide">
            <summary> Skryje hlvny panel. </summary>
        </member>
        <member name="M:ui.ControlsHolder.show">
            <summary> Zobrazi hlavny panel. </summary>
        </member>
        <member name="M:ui.ControlsHolder.visualizeStructure">
            <summary> Bezpecne vizualizuje strukturu. Vyuziva metodu doVisualuzeStructure. </summary>
        </member>
        <member name="M:ui.ControlsHolder.createPanels(System.Windows.Forms.Control)">
            <summary> Vytvori vsetky ovladacie panely. </summary>
            <param name="parent"> Rodicovsky komponent pre ovladacie prvky. </param>
        </member>
        <member name="M:ui.ControlsHolder.#ctor(structures.StructureADT)">
            <summary> Konstruktor. </summary>
            <param name="adt"> ADT ovladanych struktur. </param>
        </member>
        <member name="T:ui.ControlsHolder">
            <summary>
Ovladace pre ovladacie prvky.
Tvori vykonny objekt vzoru Builder.
</summary>
        </member>
        <member name="M:ui.ControlsDirector.getControlsHolderInstance(structures.StructureADT)">
            <summary>
Vrati instanciu ControlsBuilder podla ADT. 
Ak taka instancia este neexistuje, tak ju iba vytvori, ale nevlozi do rozhrania!
Ak uz taka instancia ControlsBuilder existuje, vrati tu.
</summary>
            <param name="adt"> Typ ADT. </param>
        </member>
        <member name="M:ui.ControlsDirector.createControlsHolderInstance(structures.StructureADT,System.Windows.Forms.Control)">
            <summary>
Vrati instanciu ControlsBuilder podla ADT. 
Ak taka instancia este neexistuje, tak ju vytvori a spravne zapoji do uzivatelskeho rozhrania.
Ak uz taka instancia ControlsBuilder existuje, vrati tu.
</summary>
            <param name="adt"> Typ ADT. </param>
            <param name="parent"> Rodicovsky komponent pre ovladacie prvky. </param>
        </member>
        <member name="M:ui.ControlsDirector.getInstance">
            <summary> Jednoducha tovarenska metoda pre ziskanie instancie jedinacika. </summary>
            <returns> Instancia triedy ControlsDirector. </returns>
            <remarks> Vyuziva Lazy initialization. </remarks>
        </member>
        <member name="M:ui.ControlsDirector.#ctor">
            <summary> Chraneny konstruktor. </summary>
        </member>
        <member name="F:ui.ControlsDirector.controlsHolders_">
            <summary> Tabulka builderov. </summary>
        </member>
        <member name="F:ui.ControlsDirector.director_">
            <summary> Premenna triedy obsahujuca odkaz na jedinu instanciu triedy. </summary>
        </member>
        <member name="T:ui.ControlsDirector">
            <summary>
Sluzi na vytvorenie panelu na ovladanie struktury.
Je navrhnuty ako Singleton, a tvori riadiaci objekt vzoru Builder.
</summary>
        </member>
        <member name="T:ui.TimeMeasurement">
            <summary> Meranie casu. </summary>
        </member>
        <member name="M:ui.ControlsLock.isUpdating">
            <summary> Metoda kontroluje, ci je mozne robit zmeny. </summary>
            <returns> true, ak je mozne robit zmeny, false inak. </returns>
        </member>
        <member name="M:ui.ControlsLock.endUpdate">
            <summary> Metoda volana na konci bloku, ktory bol predtym zamknuty. </summary>
        </member>
        <member name="M:ui.ControlsLock.beginUpdate">
            <summary> Metoda volana na zaciatku bloku, ktory ma byt zamknuty. </summary>
        </member>
        <member name="F:ui.ControlsLock.updates_">
            <summary> Pocitadlo zmien. </summary>
        </member>
        <member name="T:ui.ControlsLock">
            <summary>
Trieda, ktorej instancie pocitaju zmeny.
</summary>
        </member>
        <member name="M:ui.PanelControls.InitializeComponent">
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="F:ui.PanelControls.components">
            <summary>
Required designer variable.
</summary>
        </member>
        <member name="F:ui.PanelControls.panelActionHistory_">
            <summary> Tabulka s historiou operacii. </summary>
        </member>
        <member name="F:ui.PanelControls.panelPerformance_">
            <summary> Graf s vykonmi struktur. </summary>
        </member>
        <member name="F:ui.PanelControls.panelPresent_">
            <summary> Prezentacny panel struktury. </summary>
        </member>
        <member name="M:ui.PanelActionHistory.InitializeComponent">
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="F:ui.PanelActionHistory.components">
            <summary>
Required designer variable.
</summary>
        </member>
        <member name="M:ui.PanelActionHistory.enableControls">
            <summary> Aktualizuje ovladacie prvky. </summary>
        </member>
        <member name="M:ui.PanelActionHistory.createListViewItem(ui.OperationInfo*)">
            <summary> Pre dany zaznam o operacii vytvori a naformatuje ListViewItem. </summary>
            <param name="operationInfo"> Zaznam o operacii. </param>
            <returns> Naformatovana ListViewItem pre dany zaznam o operacii. </returns>
        </member>
        <member name="M:ui.PanelActionHistory.Dispose">
            <summary> Destruktor. </summary>
        </member>
        <member name="M:ui.PanelActionHistory.actionPerformed(ui.OperationInfo*)">
            <summary> Upravi graf tak, aby obsahoval nove trvanie operacie nad udajovou strukturou. </summary>
            <param name="operationInfo"> Informacie o operacii. </param>
        </member>
        <member name="M:ui.PanelActionHistory.presentStructure(structures.Structure*,structures.StructureADT)">
            <summary> Odprezentuje v zozname historiu vsetkych operacii nad udajovou strukturou. </summary>
            <param name="structure"> Struktura, ktora ma byt prezentovana. </param>
            <param name="adt"> ADT struktury. </param>
        </member>
        <member name="M:ui.PanelActionHistory.#ctor">
            <summary> Konstruktor. </summary>
        </member>
        <member name="F:ui.PanelActionHistory.InfoItemData.info_">
            <summary> Informacia. </summary>
        </member>
        <member name="T:ui.PanelActionHistory.InfoItemData">
            <summary> Obalovaci objekt pre informacie. </summary>
        </member>
        <member name="T:ui.PanelActionHistory">
            <summary>
Panel prezentujuci historiu akcii udajovej struktury.
</summary>
        </member>
        <member name="F:ui.StructuresActionHistoryHolder.structuresActionHistoryHolder_">
            <summary> Premenna triedy obsahujuca odkaz na jedinu instanciu triedy. </summary>
        </member>
        <member name="M:ui.StructuresActionHistoryHolder.#ctor">
            <summary> Skryty konsktruktor. </summary>
        </member>
        <member name="M:ui.StructuresActionHistoryHolder.getStructureInfoHolderInstance(ui.InfoRegistrationParams*)">
            <summary> Vytvori instanciu StructureInfoHolder pre danu strukturu. </summary>
            <param name="params"> Parametre potrene pre vytvorenie instance StructureInfoHolder. </param>
            <returns> Instanciu StructureInfoHolder pre danu strukturu. </returns>
            <remarks> Potomok moze predefinovat vytvaranu triedu StructureInfoHolder. </remarks>
        </member>
        <member name="M:ui.StructuresActionHistoryHolder.createAndStoreInfo(structures.Structure*,structures.StructureADT,ui.ActionMemento*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Zaznamena informaciu o vykone operacie struktury. </summary>
            <param name="structure"> Struktura, nad ktorou bola operacia vykonana. </param>
            <param name="adt"> ADT struktury, ktorej patri operacia. </param>
            <param name="memento"> Memento vykonanej operacie. </param>
            <param name="time"> Cas, kolko trvalo vykonat operaciu. </param>
            <returns> Zaznamenany zaznam o operacii. </returns>
            <remarks> Vyuziva metodu createAndStoreInfo, ktorej pripravi objekt s parametrami. Postara sa o jeho zrusenie. </remarks>
        </member>
        <member name="M:ui.StructuresActionHistoryHolder.finalize">
            <summary> Odstrani instanciu jedinacika. </summary>
        </member>
        <member name="M:ui.StructuresActionHistoryHolder.getInstance">
            <summary> Jednoducha tovarenska metoda pre ziskanie instancie jedinacika. </summary>
            <returns> Instancia triedy StructuresActionHistoryHolder. </returns>
            <remarks> Vyuziva Lazy initialization. </remarks>
        </member>
        <member name="T:ui.StructuresActionHistoryHolder">
            <summary> 
Zdruzuje informacie o vykonanych operaciach.  
Navrhnuta podla vzoru Signleton.
</summary>
        </member>
        <member name="M:ui.StructureActionHistoryHolder.beforeInfoRemoved(ui.StructureInfo*)">
            <summary> Volana po poziadani instancie SingleInfoContainer o vymazanie informacie. </summary>
            <param name="info"> Odstranena informacia. </param>
        </member>
        <member name="M:ui.StructureActionHistoryHolder.afterInfoStored(ui.StructureInfo*,ui.InfoRegistrationParams*)">
            <summary> Volana po poziadani instancie SingleInfoContainer o registrovanie informacie. </summary>
            <param name="createdInfo"> Informacia vytvorena prislusnym objektom SingleInfoContainer. </param>
            <param name="params"> Parametre potrebne pre registraciu informacie. </param>
            <remarks> Zaregistruje vytvorenu informaciu do zoznamu. </remarks>
        </member>
        <member name="M:ui.StructureActionHistoryHolder.getSingleInfoContainerInstance(ui.InfoRegistrationParams*)">
            <summary> Vytvori instanciu SingleInfoContainer. </summary>
            <param name="params"> Parametre potrebne pre vytvorenie instance SingleInfoContainer. </param>
            <returns> Instancia SingleInfoContainer pre danu informaciu. </returns>
        </member>
        <member name="M:ui.StructureActionHistoryHolder.getAllOperations">
            <summary> Vrati vsetky zaznamy o operaciach.  </summary>
            <returns> Vsetky zaznamy o operaciach. </returns>
        </member>
        <member name="M:ui.StructureActionHistoryHolder.Dispose">
            <summary> Destruktor. </summary>
        </member>
        <member name="M:ui.StructureActionHistoryHolder.#ctor(ui.InfoItem*,structures.Structure*,structures.StructureADT)">
            <summary> Parametricky konstruktor. </summary>
            <param name="parent"> Rodic prvku. </param>
            <param name="structure"> Struktura, ktorej patria zaznamy. </param>
            <param name="adt"> ADT struktury, ktorej patria zaznamy. </param>
        </member>
        <member name="T:ui.StructureActionHistoryHolder">
            <summary> Zapuzdrje informacie o vykonanych operaciach patriacich konkretnej udajovej strukture. </summary>
        </member>
        <member name="M:ui.SingleActionHistoryContainer.doStoreInfo(ui.InfoRegistrationParams*)">
            <summary> Vytvori instanciu StructureInfo. </summary>
            <param name="params"> Parametre potrebne pre vytvorenie instance StructureInfo. </param>
            <returns> Instancia StructureInfo pre danu informaciu. </returns>
            <remarks> Potomok moze predefinovat vytvaranu triedu SingleInfoContainer. </remarks>
        </member>
        <member name="M:ui.SingleActionHistoryContainer.removeInfo(ui.StructureInfo*)">
            <summary> Odstrani tuto informaciu. Nevola jej destruktor! </summary>
            <param name="info"> Odstranena informacia. </param>
        </member>
        <member name="M:ui.SingleActionHistoryContainer.#ctor(ui.InfoItem*,System.Int32)">
            <summary> Parametricky konstruktor. </summary>
            <param name="parent"> Rodic prvku. </param>
            <param name="id"> ID informacie. </param>
        </member>
        <member name="T:ui.SingleActionHistoryContainer">
            <summary> Zdruzuje informacie o vykonanej operacii v strukture. </summary>
        </member>
        <member name="F:ui.OperationInfo.memento_">
            <summary> Memento operacie. </summary>
        </member>
        <member name="F:ui.OperationInfo.time_">
            <summary> Cas, kolko trvalo vykonat operaciu. </summary>
        </member>
        <member name="M:ui.OperationInfo.getMemento">
            <summary> Getter atributu memento_. </summary>
            <returns> Hodnota atributu memento_. </returns>
        </member>
        <member name="M:ui.OperationInfo.getTime">
            <summary> Getter atributu duration_. </summary>
            <returns> Hodnota atributu duration_. </returns>
        </member>
        <member name="M:ui.OperationInfo.Dispose">
            <summary> Destruktor. </summary>
        </member>
        <member name="M:ui.OperationInfo.#ctor(ui.InfoItem*,ui.ActionMemento*,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Parametricky konstruktor. </summary>
            <param name="parent"> Rodic prvku. </param>
            <param name="memento"> Memento operacie. </param>
            <param name="time"> Trvanie operacie. </param>
            <remarks> Postara sa o uvolnenie mementa. </remarks>
        </member>
        <member name="T:ui.OperationInfo">
            <summary> Predstavuje informaciu o vykone operacie v strukture. </summary>
        </member>
        <member name="F:ui.OperationParams.Memento">
            <summary> Memento operacie. </summary>
        </member>
        <member name="F:ui.OperationParams.Time">
            <summary> Cas, kolko trvalo vykonat operaciu. </summary>
        </member>
        <member name="T:ui.OperationParams">
            <summary> Predstavuje parametre potrebne pre registraciu informacie of vykone operacie v strukture. </summary>
        </member>
        <member name="F:ui.ActionMemento.actionID_">
            <summary> ID akcie, ktorej patri. </summary>
        </member>
        <member name="M:ui.ActionMemento.getActionID">
            <summary> Vrati ID akcie, ktorej patri. </summary>
            <returns> ID akcie, ktorej patri. </returns>
        </member>
        <member name="M:ui.ActionMemento.clone">
            <summary> Operacia klonovania. </summary>
            <returns> Klon mementa. </returns>
        </member>
        <member name="M:ui.ActionMemento.Dispose">
            <summary> Destruktor. </summary>
        </member>
        <member name="M:ui.ActionMemento.#ctor(ui.ActionMemento!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Kopirovaci konstruktor. </summary>
            <param name="other"> Memento, z ktoreho ma prebrat vlastnosti. </param>
        </member>
        <member name="M:ui.ActionMemento.#ctor(System.Int32)">
            <summary> Parametricky konstruktor. </summary>
            <param name="actionID"> ID akcie, ktorej patri. </param>
        </member>
        <member name="T:ui.ActionMemento">
            <summary> Memento akcie. </summary>
        </member>
        <member name="M:ui.PanelPerformanceChart.InitializeComponent">
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="M:ui.PanelPerformanceChart.getSeries(structures.StructureADT,System.Int32,System.String)">
            <summary> Ak neexistuje, tak vrati series pre danu operaciu. </summary>
            <param name="adt"> ADT struktury. </param>
            <param name="operationID"> ID operacie. </param>
            <returns> Series pre danu operaciu. Ak neexistuje, podla parametrov vytvori novu. </returns>
        </member>
        <member name="F:ui.PanelPerformanceChart.components">
            <summary>
Required designer variable.
</summary>
        </member>
        <member name="M:ui.PanelPerformanceChart.actionPerformed(ui.PerformanceInfo*)">
            <summary> Upravi graf tak, aby obsahoval nove trvanie operacie nad udajovou strukturou. </summary>
            <param name="performanceInfo"> Informacie o operacii. </param>
        </member>
        <member name="M:ui.PanelPerformanceChart.presentStructure(structures.Structure*,structures.StructureADT)">
            <summary> Odprezentuje v grafe historiu vsetkych operacii nad udajovou strukturou. </summary>
            <param name="structure"> Struktura, ktora ma byt prezentovana. </param>
            <param name="adt"> ADT struktury. </param>
        </member>
        <member name="T:ui.PanelPerformanceChart">
            <summary>
Panel prezentujuci vykon udajovej struktury.
</summary>
        </member>
        <member name="F:ui.StructuresPerformanceHolder.structuresPerformanceHolder_">
            <summary> Premenna triedy obsahujuca odkaz na jedinu instanciu triedy. </summary>
        </member>
        <member name="M:ui.StructuresPerformanceHolder.#ctor">
            <summary> Skryty konsktruktor. </summary>
        </member>
        <member name="M:ui.StructuresPerformanceHolder.getStructureInfoHolderInstance(ui.InfoRegistrationParams*)">
            <summary> Vytvori instanciu StructureInfoHolder pre danu strukturu. </summary>
            <param name="params"> Parametre potrene pre vytvorenie instance StructureInfoHolder. </param>
            <returns> Instanciu StructureInfoHolder pre danu strukturu. </returns>
            <remarks> Potomok moze predefinovat vytvaranu triedu StructureInfoHolder. </remarks>
        </member>
        <member name="M:ui.StructuresPerformanceHolder.createAndStoreInfo(structures.Structure*,structures.StructureADT,System.Int32,System.UInt64,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Zaznamena informaciu o vykone operacie struktury. </summary>
            <param name="structure"> Struktura, nad ktorou bola operacia vykonana. </param>
            <param name="adt"> ADT struktury, ktorej patri operacia. </param>
            <param name="operationID"> ID vykonanej operacie. </param>
            <param name="size"> Velkost udajovej struktury v dobe, kedy bola operacia vykonana. </param>
            <param name="time"> Cas, kolko trvalo vykonat operaciu. </param>
            <returns> Zaznamenany zaznam o operacii. </returns>
            <remarks> Vyuziva metodu createAndStoreInfo, ktorej pripravi objekt s parametrami. Postara sa o jeho zrusenie. </remarks>
        </member>
        <member name="M:ui.StructuresPerformanceHolder.finalize">
            <summary> Odstrani instanciu jedinacika. </summary>
        </member>
        <member name="M:ui.StructuresPerformanceHolder.getInstance">
            <summary> Jednoducha tovarenska metoda pre ziskanie instancie jedinacika. </summary>
            <returns> Instancia triedy StructuresPerformanceHolder. </returns>
            <remarks> Vyuziva Lazy initialization. </remarks>
        </member>
        <member name="T:ui.StructuresPerformanceHolder">
            <summary> 
Zdruzuje informacie o vykone operacii vsetkych udajovych struktur.  
Navrhnuta podla vzoru Signleton.
</summary>
        </member>
        <member name="F:ui.StructurePerformanceHolder.maxSize_">
            <summary> Maximalna velkost struktury. </summary>
        </member>
        <member name="M:ui.StructurePerformanceHolder.beforeInfoStored(ui.InfoRegistrationParams*)">
            <summary> Volana pred poziadanim instancie SingleInfoContainer o registrovanie informacie. </summary>
            <param name="params"> Parametre potrebne pre registraciu informacie. </param>
            <remarks> Vyuziva sa v sablonovej metode createAndStoreInfo. U predka nerobi nic. </remarks>
        </member>
        <member name="M:ui.StructurePerformanceHolder.getSingleInfoContainerInstance(ui.InfoRegistrationParams*)">
            <summary> Vytvori instanciu SingleInfoContainer. </summary>
            <param name="params"> Parametre potrebne pre vytvorenie instance SingleInfoContainer. </param>
            <returns> Instancia SingleInfoContainer pre danu informaciu. </returns>
        </member>
        <member name="M:ui.StructurePerformanceHolder.#ctor(ui.InfoItem*,structures.Structure*,structures.StructureADT)">
            <summary> Parametricky konstruktor. </summary>
            <param name="parent"> Rodic prvku. </param>
            <param name="structure"> Struktura, ktorej patria zaznamy. </param>
            <param name="adt"> ADT struktury, ktorej patria zaznamy. </param>
        </member>
        <member name="T:ui.StructurePerformanceHolder">
            <summary> Zapuzdrje informacie o vykone operacii patriacich konkretnej udajovej strukture. </summary>
        </member>
        <member name="M:ui.SinglePerformanceContainer.beforeInfoStored(ui.InfoRegistrationParams*)">
            <summary> Volana pred registrovanim informacie. </summary>
            <param name="params"> Parametre potrebne pre registraciu informacie. </param>
            <remarks> Vola ensureRecordsUpToSize </remarks>
        </member>
        <member name="M:ui.SinglePerformanceContainer.doStoreInfo(ui.InfoRegistrationParams*)">
            <summary> Vytvori instanciu StructureInfo. </summary>
            <param name="params"> Parametre potrebne pre vytvorenie instance StructureInfo. </param>
            <returns> Instancia StructureInfo pre danu informaciu. </returns>
            <remarks> Potomok moze predefinovat vytvaranu triedu SingleInfoContainer. </remarks>
        </member>
        <member name="M:ui.SinglePerformanceContainer.ensureInfoUpToSize(System.UInt64)">
            <summary> Zabezpeci, aby existovali (aspon prazdne) zaznamy po danu velkost udajovej struktury (vratane). </summary>
            <param name="size"> Velkost udajovej struktury. </param>
        </member>
        <member name="M:ui.SinglePerformanceContainer.#ctor(ui.InfoItem*,System.Int32)">
            <summary> Parametricky konstruktor. </summary>
            <param name="parent"> Rodic prvku. </param>
            <param name="id"> ID informacie. </param>
        </member>
        <member name="T:ui.SinglePerformanceContainer">
            <summary> Zdruzuje informacie o vykone rovnakej operacie v strukture. </summary>
        </member>
        <member name="F:ui.PerformanceInfo.timeSum_">
            <summary> Pocet casov </summary>
        </member>
        <member name="F:ui.PerformanceInfo.time_">
            <summary> Sumar casov, ktore trvalo vykonat operaciu. </summary>
        </member>
        <member name="F:ui.PerformanceInfo.size_">
            <summary>  Velkost udajovej struktury v dobe, kedy bola operacia vykonana. </summary>
        </member>
        <member name="M:ui.PerformanceInfo.incTime(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Prida do zlozitosti dalsiu hodnotu casu. </summary>
            <param name="time"> Cas, ktory trvalo vykonat operaciu. </param>
        </member>
        <member name="M:ui.PerformanceInfo.complexity">
            <summary> Vrati priemernu casovu narocnost. </summary>
            <returns> Priemerna casova narocnost. </returns>
        </member>
        <member name="M:ui.PerformanceInfo.getSize">
            <summary> Getter atributu size_. </summary>
            <returns> Hodnota atributu size_. </returns>
        </member>
        <member name="M:ui.PerformanceInfo.#ctor(ui.InfoItem*,System.UInt64,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary> Parametricky konstruktor. </summary>
            <param name="parent"> Rodic prvku. </param>
            <param name="size"> Velkost udajovej struktury v dobe, kedy bola operacia vykonana. </param>
            <param name="time"> Cas, ktory trvalo vykonat operaciu. </param>
        </member>
        <member name="M:ui.PerformanceInfo.#ctor(ui.InfoItem*,System.UInt64)">
            <summary> Parametricky konstruktor. </summary>
            <param name="parent"> Rodic prvku. </param>
            <param name="size"> Velkost udajovej struktury v dobe, kedy bola operacia vykonana. </param>
        </member>
        <member name="T:ui.PerformanceInfo">
            <summary> Predstavuje informaciu o vykone operacie v strukture. </summary>
        </member>
        <member name="F:ui.PerformanceParams.Time">
            <summary> Cas, kolko trvalo vykonat operaciu. </summary>
        </member>
        <member name="F:ui.PerformanceParams.Size">
            <summary>  Velkost udajovej struktury v dobe, kedy bola operacia vykonana. </summary>
        </member>
        <member name="T:ui.PerformanceParams">
            <summary> Predstavuje parametre potrebne pre registraciu informacie of vykone operacie v strukture. </summary>
        </member>
        <member name="M:ui.StructuresInfoHolder.getRegisteredInfoOfADT(structures.StructureADT)">
            <summary> Vrati filter informacii daneho ADT. </summary>
            <param name="adt"> ADT, ktoreho filter sa ma vratit. </param>
            <returns> Filter informacii daneho ADT. Ak este neexistuje, vrati nullptr. </returns>
        </member>
        <member name="M:ui.StructuresInfoHolder.isInfoRegistered(structures.StructureADT,System.Int32)">
            <summary> Zisti, ci je pre dane ADT zaregistrovana informacia s danym ID. </summary>
            <param name="adt"> ADT struktury. </param>
            <param name="infoID"> ID informacie. </param>
            <returns> true, ak je taka informacia pre ADT zaregistrovana, false inak. </returns>
        </member>
        <member name="F:ui.StructuresInfoHolder.registeredInfo_">
            <summary> Tabulka, ktora sluzi ako filter informacii. Prvym klucom je ADT struktury, druhym klucom je ID informacie. Data su nazov tejto informacie. </summary>
        </member>
        <member name="F:ui.StructuresInfoHolder.structuresInfo_">
            <summary> Tabulka, ktorej klucom je struktura a datami su vsetky jej informacie. </summary>
        </member>
        <member name="M:ui.StructuresInfoHolder.beforeInfoRemoved(ui.StructureInfo*)">
            <summary> Volana po poziadani instancie StructureInfoHolder o vymazanie informacie. </summary>
            <param name="info"> Odstranena informacia. </param>
            <remarks> Vyuziva sa v sablonovej metode removeInfo. U predka nerobi nic. </remarks>
        </member>
        <member name="M:ui.StructuresInfoHolder.afterInfoStored(ui.StructureInfo*,ui.InfoRegistrationParams*)">
            <summary> Volana po poziadani instancie StructureInfoHolder o registrovanie informacie. </summary>
            <param name="createdInfo"> Informacia vytvorena prislusnym objektom StructureInfoHolder. </param>
            <param name="params"> Parametre potrebne pre registraciu informacie. </param>
            <remarks> Vyuziva sa v sablonovej metode createAndStoreInfo. U predka nerobi nic. </remarks>
        </member>
        <member name="M:ui.StructuresInfoHolder.beforeInfoStored(ui.InfoRegistrationParams*)">
            <summary> Volana pred poziadanim instancie StructureInfoHolder o registrovanie informacie. </summary>
            <param name="params"> Parametre potrebne pre registraciu informacie. </param>
            <remarks> Vyuziva sa v sablonovej metode createAndStoreInfo. U predka nerobi nic. </remarks>
        </member>
        <member name="M:ui.StructuresInfoHolder.getStructureInfoHolderInstance(ui.InfoRegistrationParams*)">
            <summary> Vytvori instanciu StructureInfoHolder pre danu strukturu. </summary>
            <param name="params"> Parametre potrene pre vytvorenie instance StructureInfoHolder. </param>
            <returns> Instanciu StructureInfoHolder pre danu strukturu. </returns>
            <remarks> Potomok moze predefinovat vytvaranu triedu StructureInfoHolder. </remarks>
        </member>
        <member name="M:ui.StructuresInfoHolder.removeInfo(ui.StructureInfo*)">
            <summary> Odstrani tuto informaciu. Vola destruktor! </summary>
            <param name="info"> Odstranena informacia. </param>
            <remarks> Spravanie je mozne upravit metodou beforeInfoRemoved. </remarks>
        </member>
        <member name="M:ui.StructuresInfoHolder.createAndStoreInfo(ui.InfoRegistrationParams*)">
            <summary> Zaznamena informaciu nad strukturou. </summary>
            <param name="params"> Parametre potrene pre registraciu informacie. </param>
            <returns> Zaznamenany zaznam o operacii. </returns>
            <remarks> 
Skontroluje, ci zbiera taku operaciu nad ADT. Ak nie, vrati nullptr. 
Jednotlive instancie tried, z ktorych sa sklada vysledna struktura su vytvarane prislusnymi tovarenskymi metodami.
Navrhnuta ako template method. 
Upravit spravanie je mozne upravit metodami getStructureInfoHolderInstance, beforeInfoStored a afterInfoStored.
</remarks>
        </member>
        <member name="M:ui.StructuresInfoHolder.infoCaption(structures.StructureADT,System.Int32)">
            <summary> Ziska nazov zaregistrovanej informacie. </summary>
            <param name="adt"> ADT struktury. </param>
            <param name="infoID"> ID informacie. </param>
            <returns> Nazov operacie. Ak informacia nie je zaregistrovana, vrati prazdny retazec. </returns>
        </member>
        <member name="M:ui.StructuresInfoHolder.registerInfo(structures.StructureADT,System.Int32,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary> Zaregistruje pre dane ADT zbieranie informacii s danym id a nazvom. Ak uz je taka informacia zaregistrovana, prepise jej nazov. </summary>
            <param name="adt"> ADT struktury. </param>
            <param name="infoID"> ID informacie. </param>
            <param name="infoCaption"> Nazov informacie. </param>
        </member>
        <member name="M:ui.StructuresInfoHolder.getStructureInfoHolder(structures.Structure*)">
            <summary> Vrati informacie danej udajovej struktury. </summary>
            <param name="structure"> Struktura, ktorej informacie su ziadane. </param>
            <returns> Informacie danej udajovej struktury. Ak este neexistuju, vrati nullptr. </returns>
        </member>
        <member name="M:ui.StructuresInfoHolder.Dispose">
            <summary> Destruktor. </summary>
        </member>
        <member name="M:ui.StructuresInfoHolder.#ctor">
            <summary> Skryty konsktruktor. </summary>
        </member>
        <member name="T:ui.StructuresInfoHolder">
            <summary> Zdruzuje informacie o vsetkych udajovych strukturach. </summary>
        </member>
        <member name="F:ui.StructureInfoHolder.structureInfoMap_">
            <summary> Tabulka, ktorej klucom je typ informacie a datami su vsetky informacie tohto typu. </summary>
        </member>
        <member name="F:ui.StructureInfoHolder.adt_">
            <summary> ADT struktury, ktorej patria zaznamy. </summary>
        </member>
        <member name="F:ui.StructureInfoHolder.structure_">
            <summary> Struktura, ktorej patria zaznamy. </summary>
        </member>
        <member name="M:ui.StructureInfoHolder.beforeInfoRemoved(ui.StructureInfo*)">
            <summary> Volana po poziadani instancie SingleInfoContainer o vymazanie informacie. </summary>
            <param name="info"> Odstranena informacia. </param>
            <remarks> Vyuziva sa v sablonovej metode removeInfo. U predka nerobi nic. </remarks>
        </member>
        <member name="M:ui.StructureInfoHolder.afterInfoStored(ui.StructureInfo*,ui.InfoRegistrationParams*)">
            <summary> Volana po poziadani instancie SingleInfoContainer o registrovanie informacie. </summary>
            <param name="createdInfo"> Informacia vytvorena prislusnym objektom SingleInfoContainer. </param>
            <param name="params"> Parametre potrebne pre registraciu informacie. </param>
            <remarks> Vyuziva sa v sablonovej metode createAndStoreInfo. U predka nerobi nic. </remarks>
        </member>
        <member name="M:ui.StructureInfoHolder.beforeInfoStored(ui.InfoRegistrationParams*)">
            <summary> Volana pred poziadanim instancie SingleInfoContainer o registrovanie informacie. </summary>
            <param name="params"> Parametre potrebne pre registraciu informacie. </param>
            <remarks> Vyuziva sa v sablonovej metode createAndStoreInfo. U predka nerobi nic. </remarks>
        </member>
        <member name="M:ui.StructureInfoHolder.getSingleInfoContainerInstance(ui.InfoRegistrationParams*)">
            <summary> Vytvori instanciu SingleInfoContainer. </summary>
            <param name="params"> Parametre potrebne pre vytvorenie instance SingleInfoContainer. </param>
            <returns> Instancia SingleInfoContainer pre danu informaciu. </returns>
            <remarks> Potomok moze predefinovat vytvaranu triedu SingleInfoContainer. </remarks>
        </member>
        <member name="M:ui.StructureInfoHolder.removeInfo(ui.StructureInfo*)">
            <summary> Odstrani tuto informaciu. Nevola jej destruktor! </summary>
            <param name="info"> Odstranena informacia. </param>
            <remarks> Spravanie je mozne upravit metodou beforeInfoRemoved. </remarks>
        </member>
        <member name="M:ui.StructureInfoHolder.createAndStoreInfo(ui.InfoRegistrationParams*)">
            <summary> Zaznamena informaciu nad strukturou. </summary>
            <param name="params"> Parametre potrebne pre registraciu informacie. </param>
            <returns> Zaznamenany zaznam o operacii. </returns>
            <remarks> 
Navrhnuta ako template method. 
Upravit spravanie je mozne upravit metodami getSingleInfoContainerInstance, beforeInfoStored a afterInfoStored.
</remarks>
        </member>
        <member name="M:ui.StructureInfoHolder.getStructureInfoMap">
            <summary> Vrati vsetky informacie.  </summary>
            <returns> Vsetky informacie. </returns>
        </member>
        <member name="M:ui.StructureInfoHolder.getADT">
            <summary> Getter ADT. </summary>
            <returns> ADT. </returns>
            <remarks> Prekryva metodu getADT v retazi zodpovednosti. </remarks>
        </member>
        <member name="M:ui.StructureInfoHolder.getStructure">
            <summary> Getter struktury. </summary>
            <returns> Struktura. </returns>
            <remarks> Prekryva metodu getStructure v retazi zodpovednosti. </remarks>
        </member>
        <member name="M:ui.StructureInfoHolder.Dispose">
            <summary> Destruktor. </summary>
        </member>
        <member name="M:ui.StructureInfoHolder.#ctor(ui.InfoItem*,structures.Structure*,structures.StructureADT)">
            <summary> Parametricky konstruktor. </summary>
            <param name="parent"> Rodic prvku. </param>
            <param name="structure"> Struktura, ktorej patria zaznamy. </param>
            <param name="adt"> ADT struktury, ktorej patria zaznamy. </param>
        </member>
        <member name="T:ui.StructureInfoHolder">
            <summary> Zapuzdrje informacie patriace konkretnej udajovej strukture. </summary>
        </member>
        <member name="F:ui.SingleInfoContainer.id_">
            <summary> ID informacie. </summary>
        </member>
        <member name="F:ui.SingleInfoContainer.infoVector_">
            <summary> Zoznam zaznamov o operacii. </summary>
        </member>
        <member name="M:ui.SingleInfoContainer.afterInfoStored(ui.StructureInfo*,ui.InfoRegistrationParams*)">
            <summary> Volana po registrovanie informacie. </summary>
            <param name="createdInfo"> Registrovana informacia. </param>
            <param name="params"> Parametre potrebne pre registraciu informacie. </param>
            <remarks> Vyuziva sa v sablonovej metode createAndStoreInfo. U predka nerobi nic. </remarks>
        </member>
        <member name="M:ui.SingleInfoContainer.beforeInfoStored(ui.InfoRegistrationParams*)">
            <summary> Volana pred registrovanim informacie. </summary>
            <param name="params"> Parametre potrebne pre registraciu informacie. </param>
            <remarks> Vyuziva sa v sablonovej metode createAndStoreInfo. U predka nerobi nic. </remarks>
        </member>
        <member name="M:ui.SingleInfoContainer.doStoreInfo(ui.InfoRegistrationParams*)">
            <summary> Vytvori instanciu StructureInfo. </summary>
            <param name="params"> Parametre potrebne pre vytvorenie instance StructureInfo. </param>
            <returns> Instancia StructureInfo pre danu informaciu. </returns>
            <remarks> Potomok moze predefinovat vytvaranu triedu SingleInfoContainer. </remarks>
        </member>
        <member name="M:ui.SingleInfoContainer.removeInfo(ui.StructureInfo*)">
            <summary> Odstrani tuto informaciu. Nevola jej destruktor! </summary>
            <param name="info"> Odstranena informacia. </param>
            <remarks> U predka nerobi nic. </remarks>
        </member>
        <member name="M:ui.SingleInfoContainer.storeInfo(ui.InfoRegistrationParams*)">
            <summary> Zaznamena informaciu nad strukturou. </summary>
            <param name="params"> Parametre potrebne pre registraciu informacie. </param>
            <returns> Zaznamenany zaznam o operacii. </returns>
            <remarks> 
Navrhnuta ako template method. 
Upravit spravanie je mozne metodami doStoreInfo, beforeInfoStored a afterInfoStored;
</remarks>
        </member>
        <member name="M:ui.SingleInfoContainer.infoAt(System.UInt64)">
            <summary> Ak existuje, vrati informaciu na danom indexe. </summary>
            <param name="index"> Index informacie. </param>
            <returns> Informacia na danom indexe. Ak neexistuje, vrati nullptr. </returns>
        </member>
        <member name="M:ui.SingleInfoContainer.lastInfo">
            <summary> Ak existuje, vrati poslednu informaciu. </summary>
            <returns> Posledna informacia. Ak neexistuje, vrati nullptr. </returns>
        </member>
        <member name="M:ui.SingleInfoContainer.getInfoVector">
            <summary> Getter vsetkych zaznamov operacie. </summary>
            <returns> Vsetky zaznamy operacie. </returns>
        </member>
        <member name="M:ui.SingleInfoContainer.getID">
            <summary> Getter ID operacie. </summary>
            <returns> ID operacie. </returns>
            <remarks> Prekryva metodu getID v retazi zodpovednosti. </remarks>
        </member>
        <member name="M:ui.SingleInfoContainer.Dispose">
            <summary> Destruktor. </summary>
        </member>
        <member name="M:ui.SingleInfoContainer.#ctor(ui.InfoItem*,System.Int32)">
            <summary> Parametricky konstruktor. </summary>
            <param name="parent"> Rodic prvku. </param>
            <param name="id"> ID informacie. </param>
        </member>
        <member name="T:ui.SingleInfoContainer">
            <summary> Zdruzuje informacie rovnakeho ID. </summary>
        </member>
        <member name="M:ui.StructureInfo.#ctor(ui.InfoItem*)">
            <summary> Parametricky konstruktor. </summary>
            <param name="parent"> Rodic prvku. </param>
        </member>
        <member name="T:ui.StructureInfo">
            <summary> Predstavuje informaciu o strukture. </summary>
        </member>
        <member name="F:ui.InfoItem.parent_">
            <summary> Rodic prvku. </summary>
        </member>
        <member name="M:ui.InfoItem.getADT">
            <summary> Getter ADT. </summary>
            <returns> ADT. </returns>
            <remarks> Defaultne vrati ADT rodica. Niekto v hierarchii musi tuto metodu spravne implementovat. </remarks>
        </member>
        <member name="M:ui.InfoItem.getStructure">
            <summary> Getter struktury. </summary>
            <returns> Struktura. </returns>
            <remarks> Defaultne vrati strukturu rodica. Niekto v hierarchii musi tuto metodu spravne implementovat. </remarks>
        </member>
        <member name="M:ui.InfoItem.getID">
            <summary> Getter ID operacie. </summary>
            <returns> ID operacie. </returns>
            <remarks> Defaultne vrati ID rodica. Niekto v hierarchii musi tuto metodu spravne implementovat. </remarks>
        </member>
        <member name="M:ui.InfoItem.getParent">
            <summary> Getter rodica. </summary>
            <returns> Rodic prvku. </returns>
        </member>
        <member name="M:ui.InfoItem.Dispose">
            <summary> Destruktor. </summary>
        </member>
        <member name="M:ui.InfoItem.#ctor(ui.InfoItem*)">
            <summary> Parametricky konstruktor. </summary>
            <param name="parent"> Rodic prvku. </param>
        </member>
        <member name="T:ui.InfoItem">
            <summary> Predstavuje prvok v retazi vlastnikov informacii. </summary>
        </member>
        <member name="F:ui.InfoRegistrationParams.InfoID">
            <summary> ID informacie. </summary>
        </member>
        <member name="F:ui.InfoRegistrationParams.ADT">
            <summary> ADT struktury, ktorej patri informacia. </summary>
        </member>
        <member name="F:ui.InfoRegistrationParams.Structure">
            <summary> Struktura, ku ktorej patri informacia. </summary>
        </member>
        <member name="T:ui.InfoRegistrationParams">
            <summary> Predstavuje parametre potrebne pre registraciu informacie. </summary>
        </member>
        <member name="F:data.GraphDataEdge.selected_">
            <summary> Umele data  - priznak sluziaci pri zobrazovani predchodcov/nasledovnikov daneho vrcholu. </summary>
        </member>
        <member name="F:data.GraphDataEdge.classKey_">
            <summary> Objekt predstavujuci jednoznacny identifikator triedy GraphDataEdge. </summary>
            <remarks> Pod jednoznacnym identifikatorom sa rozumie adresa objektu classKey_. </remarks>
        </member>
        <member name="M:data.GraphDataEdge.toString">
            <summary> Prevedie data na retazec. </summary>
            <returns> Retazec s datami. </returns>
        </member>
        <member name="M:data.GraphDataEdge.selected">
            <summary> Vracia priznak, ci je hrana s tymito datami vybrata. </summary>
            <returns> Adresa, na ktorej sa nachadza dany priznak. </returns>
            <remarks> Jedna sa o umelu metodu, ktora sa vyuziva pri zobrazovani predchodcov/nasledovnikov daneho vrcholu. </remarks>
            <summary> Vracia priznak, ci je hrana s tymito datami vybrata. </summary>
            <returns> Hodnota priznaku. </returns>
            <remarks> Jedna sa o umelu metodu, ktora sa vyuziva pri zobrazovani predchodcov/nasledovnikov daneho vrcholu. </remarks>
        </member>
        <member name="M:data.GraphDataEdge.edit">
            <summary> Upravi data pomocou okna. </summary>
            <returns> true, ak boli data upravene, false inak. </returns>
        </member>
        <member name="M:data.GraphDataEdge.reset">
            <summary> Resetne data na defaultne hodnoty. </summary>
        </member>
        <member name="M:data.GraphDataEdge.op_Assign(data.GraphDataEdge!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Data, z ktorych ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa tieto data nachadzaju po priradeni. </returns>
        </member>
        <member name="M:data.GraphDataEdge.getClassKey">
            <summary> Getter vracajuci jedinecny identifikator triedy GraphDataEdge. </summary>
            <returns> Adresa, na ktorej je "ulozena" trieda GraphDataEdge. </returns>
        </member>
        <member name="M:data.GraphDataEdge.clone">
            <summary> Operacia klonovania. Vytvori a vrati duplikat dat. </summary>
            <returns> Ukazovatel na klon dat. </returns>
        </member>
        <member name="M:data.GraphDataEdge.op_Assign(structures.GraphDataLength!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Data, z ktorych ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa tieto data nachadzaju po priradeni. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak vstupny parameter nie je typu GraphDataEdge. </exception>
            <remarks> Vyuziva typovy operator priradenia. </remarks>
        </member>
        <member name="M:data.GraphDataEdge.#ctor(data.GraphDataEdge!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Kopirovaci konstruktor. </summary>
            <param name="other"> Data typu GraphDataEdge, z ktorych sa prevezmu vlastnosti. </param>
        </member>
        <member name="M:data.GraphDataEdge.#ctor">
            <summary> Konstruktor. </summary>
        </member>
        <member name="M:data.GraphDataEdge.getKey">
            <summary> Getter vracajuci jedinecny identifikator triedy GraphDataEdge. </summary>
            <returns> Adresa, na ktorej je "ulozena" trieda GraphDataEdge. </returns>
        </member>
        <member name="M:data.GraphDataEdge.getData(structures.GraphEdge*)">
            <summary> Getter, ktory vrati data typu GraphDataEdge z danej hrany grafu. </summary>
            <param name="edge"> Hrana grafu, z ktorej ma vratit data typu GraphDataEdge. </param>
            <returns> Smernik na data typu GraphDataEdge ulozene v danej hrane grafu. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak dana hrana neobsahuje data typu GraphDataEdge. </exception>
        </member>
        <member name="T:data.GraphDataEdge">
            <summary> Data ukladane v hrane grafu registrovaneho v aplikacii DataStructures. </summary>
        </member>
        <member name="F:data.GraphDataVertex.label_">
            <summary> Konkretne data - popisok vrcholu. </summary>
        </member>
        <member name="F:data.GraphDataVertex.classKey_">
            <summary> Objekt predstavujuci jednoznacny identifikator triedy GraphDataVertex. </summary>
            <remarks> Pod jednoznacnym identifikatorom sa rozumie adresa objektu classKey_. </remarks>
        </member>
        <member name="M:data.GraphDataVertex.toString">
            <summary> Prevedie data na retazec. </summary>
            <returns> Retazec s datami. </returns>
        </member>
        <member name="M:data.GraphDataVertex.edit">
            <summary> Upravi data pomocou okna. </summary>
            <returns> true, ak boli data upravene, false inak. </returns>
        </member>
        <member name="M:data.GraphDataVertex.reset">
            <summary> Resetne data na defaultne hodnoty. </summary>
        </member>
        <member name="M:data.GraphDataVertex.op_Assign(data.GraphDataVertex!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Data, z ktorych ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa tieto data nachadzaju po priradeni. </returns>
        </member>
        <member name="M:data.GraphDataVertex.getClassKey">
            <summary> Getter vracajuci jedinecny identifikator triedy GraphDataVertex. </summary>
            <returns> Adresa, na ktorej je "ulozena" trieda GraphDataVertex. </returns>
        </member>
        <member name="M:data.GraphDataVertex.clone">
            <summary> Operacia klonovania. Vytvori a vrati duplikat dat. </summary>
            <returns> Ukazovatel na klon dat. </returns>
        </member>
        <member name="M:data.GraphDataVertex.op_Assign(structures.GraphData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Data, z ktorych ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa tieto data nachadzaju po priradeni. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak vstupny parameter nie je typu GraphDataVertex. </exception>
            <remarks> Vyuziva typovy operator priradenia. </remarks>
        </member>
        <member name="M:data.GraphDataVertex.#ctor(data.GraphDataVertex!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Kopirovaci konstruktor. </summary>
            <param name="other"> Data typu GraphDataVertex, z ktorych sa prevezmu vlastnosti. </param>
        </member>
        <member name="M:data.GraphDataVertex.#ctor">
            <summary> Konstruktor. </summary>
        </member>
        <member name="M:data.GraphDataVertex.getKey">
            <summary> Getter vracajuci jedinecny identifikator triedy GraphDataVertex. </summary>
            <returns> Adresa, na ktorej je "ulozena" trieda GraphDataVertex. </returns>
        </member>
        <member name="M:data.GraphDataVertex.getData(structures.GraphVertex*)">
            <summary> Getter, ktory vrati data typu GraphDataVertex z daneho vrcholu grafu. </summary>
            <param name="vertex"> Vrchol grafu, z ktoreho ma vratit data typu GraphDataVertex. </param>
            <returns> Smernik na data typu GraphDataVertex ulozene v danom vrchole grafu. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak dany vrchol neobsahuje data typu GraphDataVertex. </exception>
        </member>
        <member name="T:data.GraphDataVertex">
            <summary> Data ukladane vo vrchole grafu registrovaneho v aplikacii DataStructures. </summary>
        </member>
        <member name="M:data.DataRoutines.editStringManaged(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;@,System.String)">
            <summary> Upravi retazec pomocou okna. </summary>
            <param name="str"> Retazec, ktory ma byt upraveny. </param>
            <param name="caption"> Popis okna. </param>
            <returns> true, ak bol retazec upraveny, false inak. </returns>
        </member>
        <member name="M:data.DataRoutines.editString(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.String)">
            <summary> Upravi retazec pomocou okna. </summary>
            <param name="str"> Retazec, ktory ma byt upraveny. </param>
            <param name="caption"> Popis okna. </param>
            <returns> true, ak bol retazec upraveny, false inak. </returns>
        </member>
        <member name="M:data.DataRoutines.editNumberManaged(System.Double@,System.String)">
            <summary> Upravi desatinne cislo pomocou okna. </summary>
            <param name="number"> Desatinne cislo, ktore ma byt upravene. </param>
            <param name="caption"> Popis okna. </param>
            <returns> true, ak bolo desatinne cislo upravene, false inak. </returns>
        </member>
        <member name="M:data.DataRoutines.editNumberManaged(System.Int32@,System.String)">
            <summary> Upravi cele cislo pomocou okna. </summary>
            <param name="number"> Cele cislo, ktore ma byt upravene. </param>
            <param name="caption"> Popis okna. </param>
            <returns> true, ak bolo cele cislo upravene, false inak. </returns>
        </member>
        <member name="M:data.DataRoutines.editNumber(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.String)">
            <summary> Upravi desatinne cislo pomocou okna. </summary>
            <param name="number"> Desatinne cislo, ktore ma byt upravene. </param>
            <param name="caption"> Popis okna. </param>
            <returns> true, ak bolo desatinne cislo upravene, false inak. </returns>
        </member>
        <member name="M:data.DataRoutines.editNumber(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.String)">
            <summary> Upravi cele cislo pomocou okna. </summary>
            <param name="number"> Cele cislo, ktore ma byt upravene. </param>
            <param name="caption"> Popis okna. </param>
            <returns> true, ak bolo cele cislo upravene, false inak. </returns>
        </member>
        <member name="M:data.DataRoutines.editVertexIdManaged(System.Int32@,System.String)">
            <summary> Upravi id vrcholu grafu pomocou okna. </summary>
            <param name="vertexId"> Id, ktore ma byt upravene. </param>
            <param name="caption"> Popis okna. </param>
            <returns> true, ak bolo id upravene, false inak. </returns>
        </member>
        <member name="M:data.DataRoutines.editVertexId(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.String)">
            <summary> Upravi id vrcholu grafu pomocou okna. </summary>
            <param name="vertexId"> Id, ktore ma byt upravene. </param>
            <param name="caption"> Popis okna. </param>
            <returns> true, ak bolo id upravene, false inak. </returns>
        </member>
        <member name="M:data.DataRoutines.editKeyManaged(System.Int32@,System.String)">
            <summary> Upravi kluc pomocou okna. </summary>
            <param name="key"> Kluc, ktory ma byt upraveny. </param>
            <param name="caption"> Popis okna. </param>
            <returns> true, ak bol kluc upraveny, false inak. </returns>
        </member>
        <member name="M:data.DataRoutines.editKey(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.String)">
            <summary> Upravi kluc pomocou okna. </summary>
            <param name="key"> Kluc, ktory ma byt upraveny. </param>
            <param name="caption"> Popis okna. </param>
            <returns> true, ak bol kluc upraveny, false inak. </returns>
        </member>
        <member name="M:data.DataRoutines.editPriorityManaged(System.Int32@,System.String)">
            <summary> Upravi prioritu pomocou okna. </summary>
            <param name="priority"> Priorita, ktora ma byt upravena. </param>
            <param name="caption"> Popis okna. </param>
            <returns> true, ak bola priorita upravena, false inak. </returns>
        </member>
        <member name="M:data.DataRoutines.editPriority(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.String)">
            <summary> Upravi prioritu pomocou okna. </summary>
            <param name="priority"> Priorita, ktora ma byt upravena. </param>
            <param name="caption"> Popis okna. </param>
            <returns> true, ak bola priorita upravena, false inak. </returns>
        </member>
        <member name="M:data.DataRoutines.editDataManaged(System.Int32@,System.String)">
            <summary> Upravi data pomocou okna. </summary>
            <param name="data"> Data, ktore maju byt upravene. </param>
            <param name="caption"> Popis okna. </param>
            <returns> true, ak boli data upravene, false inak. </returns>
        </member>
        <member name="M:data.DataRoutines.editData(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.String)">
            <summary> Upravi data pomocou okna. </summary>
            <param name="data"> Data, ktore maju byt upravene. </param>
            <param name="caption"> Popis okna. </param>
            <returns> true, ak boli data upravene, false inak. </returns>
        </member>
        <member name="M:data.DataRoutines.editByteManaged(System.Byte@,System.String)">
            <summary> Upravi byte pomocou okna. </summary>
            <param name="B"> Byte, ktory ma byt upraveny. </param>
            <param name="caption"> Popis okna. </param>
            <returns> true, ak bol byte upraveny, false inak. </returns>
        </member>
        <member name="M:data.DataRoutines.editByte(System.Byte*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.String)">
            <summary> Upravi byte pomocou okna. </summary>
            <param name="B"> Byte, ktory ma byt upraveny. </param>
            <param name="caption"> Popis okna. </param>
            <returns> true, ak bol byte upraveny, false inak. </returns>
        </member>
        <member name="M:data.DataRoutines.showString(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.String)">
            <summary> Zobrazi retazec pomocou okna. </summary>
            <param name="str"> Retazec, ktory ma byt zobrazeny. </param>
            <param name="caption"> Popis okna. </param>
        </member>
        <member name="M:data.DataRoutines.showNumber(System.Double!System.Runtime.CompilerServices.IsConst,System.String)">
            <summary> Zobrazi desatinne cislo pomocou okna. </summary>
            <param name="number"> Desatinne cislo, ktore ma byt zobrazene. </param>
            <param name="caption"> Popis okna. </param>
        </member>
        <member name="M:data.DataRoutines.showNumber(System.Int32!System.Runtime.CompilerServices.IsConst,System.String)">
            <summary> Zobrazi cele cislo pomocou okna. </summary>
            <param name="number"> Cele cislo, ktore ma byt zobrazene. </param>
            <param name="caption"> Popis okna. </param>
        </member>
        <member name="M:data.DataRoutines.showVertexId(System.Int32!System.Runtime.CompilerServices.IsConst,System.String)">
            <summary> Zobrazi id vrcholu pomocou okna. </summary>
            <param name="vertexId"> Id, ktore ma byt zobrazene. </param>
            <param name="caption"> Popis okna. </param>
        </member>
        <member name="M:data.DataRoutines.showKey(System.Int32!System.Runtime.CompilerServices.IsConst,System.String)">
            <summary> Zobrazi kluc pomocou okna. </summary>
            <param name="key"> Kluc, ktory ma byt zobrazeny. </param>
            <param name="caption"> Popis okna. </param>
        </member>
        <member name="M:data.DataRoutines.showPriority(System.Int32!System.Runtime.CompilerServices.IsConst,System.String)">
            <summary> Zobrazi prioritu pomocou okna. </summary>
            <param name="priority"> Priorita, ktora ma byt zobrazena. </param>
            <param name="caption"> Popis okna. </param>
        </member>
        <member name="M:data.DataRoutines.showData(System.Int32!System.Runtime.CompilerServices.IsConst,System.String)">
            <summary> Zobrazi data pomocou okna. </summary>
            <param name="data"> Data, ktore maju byt zobrazene. </param>
            <param name="caption"> Popis okna. </param>
        </member>
        <member name="M:data.DataRoutines.showByte(System.Byte!System.Runtime.CompilerServices.IsConst,System.String)">
            <summary> Zobrazi byte pomocou okna. </summary>
            <param name="B"> Byte, ktory ma byt zobrazeny. </param>
            <param name="caption"> Popis okna. </param>
        </member>
        <member name="M:data.FormData.InitializeComponent">
            <summary>
Required designer variable.
</summary>
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="M:ui.UIRoutines.#ctor">
            <summary> Sukromny konstruktor znemoznuje vytvorenie instancie kniznicnej triedy. </summary>
        </member>
        <member name="T:ui.UIRoutines">
            <summary> 
Kniznicna trieda obsahujuca rutinne metody pre pracu s rozhranim.
</summary>
        </member>
        <member name="M:structures.MemoryRoutines.#ctor">
            <summary> Sukromny konstruktor znemoznuje vytvorenie instancie kniznicnej triedy. </summary>
        </member>
        <member name="M:structures.MemoryRoutines.byteNthBitToggle(System.Byte*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary> Prepne hodnotu n-teho bitu v byte (teda z 0 na 1 a opacne). </summary>
            <param name="B"> Byte. </param>
            <param name="n"> Poradie bitu v byte. </param>
            <returns> Upraveny byte. </returns>
        </member>
        <member name="M:structures.MemoryRoutines.byteNthBitTo1(System.Byte*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary> Nastavi hodnotu n-teho bitu v na 1. </summary>
            <param name="B"> Byte. </param>
            <param name="n"> Poradie bitu v byte. </param>
            <returns> Upraveny byte. </returns>
        </member>
        <member name="M:structures.MemoryRoutines.byteNthBitTo0(System.Byte*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary> Nastavi hodnotu n-teho bitu v byte na 0. </summary>
            <param name="B"> Byte. </param>
            <param name="n"> Poradie bitu v byte. </param>
            <returns> Upraveny byte. </returns>
        </member>
        <member name="M:structures.MemoryRoutines.byteNthBitGet(System.Byte*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary> Vrati hodnotu n-teho bitu v byte. </summary>
            <param name="B"> Byte. </param>
            <param name="n"> Poradie bitu v byte. </param>
            <returns> Hodnota n-teho bitu v byte. </returns>
        </member>
        <member name="M:structures.MemoryRoutines.byteSHR(System.Byte*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Posunie byte o 1 doprava. </summary>
            <param name="B"> Byte. </param>
            <returns> Upraveny byte. </returns>
        </member>
        <member name="M:structures.MemoryRoutines.byteSHL(System.Byte*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Posunie byte o 1 dolava. </summary>
            <param name="B"> Byte. </param>
            <returns> Upraveny byte. </returns>
        </member>
        <member name="M:structures.MemoryRoutines.byteXOR(System.Byte*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Vykona operaciu XOR nad bytom. </summary>
            <param name="B"> Byte. </param>
            <returns> Upraveny byte. </returns>
        </member>
        <member name="M:structures.MemoryRoutines.byteReset(System.Byte*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Nastavi vsetky bity v byte na 0. </summary>
            <param name="B"> Byte. </param>
            <returns> Upraveny byte. </returns>
        </member>
        <member name="M:structures.MemoryRoutines.byteSet(System.Byte*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Nastavi vsetky bity v byte na 1. </summary>
            <param name="B"> Byte. </param>
            <returns> Upraveny byte. </returns>
        </member>
        <member name="F:structures.MemoryRoutines.MAX_BYTE">
            <summary> MAximalna hodnota byte-u. </summary>
        </member>
        <member name="T:structures.MemoryRoutines">
            <summary> 
Kniznicna trieda obsahujuca rutinne metody pre pracu s pamatou.
</summary>
        </member>
        <member name="M:structures.StructureFactory.getADTManagerByType(structures.StructureADT!System.Runtime.CompilerServices.IsConst)">
            <summary> Vrati ADTManager na zaklade typu struktur, ktore spravuje. </summary>
            <param name="adt"> ADT spravovanych struktur. </param>
            <returns> ADTManager na zaklade typu struktur, ktore spravuje. </returns>
        </member>
        <member name="M:structures.StructureFactory.getStructureInstance(structures.StructureADS)">
            <summary>
Tovarenska metoda pre ziskanie instancie konkrenej ADS pomocou prislusneho manazera ADS tovarni.
</summary>
            <param name="ads"> ADS vytvaranej struktury. </param>
            <returns> Vytvorena struktura daneho ADS. Ak prislusny ADT manzer neexistuje alebo nebude schopny vytvorit instanciu, vrati nullptr.</returns>
        </member>
        <member name="M:structures.StructureFactory.registerPrototype(structures.StructureADS,structures.Structure*)">
            <summary> Zaregistruje prototyp danej ADS. </summary>
            <param name="ads"> ADS tovarne, do ktorej bude prototyp registrovany. </param>
            <param name="prototype"> Prototyp struktur. </param>
            <returns> True, ak registracia prebehla uspesne, false inak.</returns>
        </member>
        <member name="M:structures.StructureFactory.finalize">
            <summary />
            <summary> Odstrani instanciu jedinacika. </summary>
        </member>
        <member name="M:structures.StructureFactory.getInstance">
            <summary> Jednoducha tovarenska metoda pre ziskanie instancie jedinacika. </summary>
            <returns> Instancia triedy StructureFactory. </returns>
            <remarks> Vyuziva Lazy initialization. </remarks>
        </member>
        <member name="M:structures.StructureFactory.Dispose">
            <summary> Destruktor sa postara o uvolneneio vsetkych ADT manazerov. </summary>
        </member>
        <member name="M:structures.StructureFactory.#ctor">
            <summary> Skryty konsktruktor. Pre vsetky ADT vytvori ich manazera. </summary>
        </member>
        <member name="F:structures.StructureFactory.adtManagers_">
            <summary> Manazery jednodlivych ADT. </summary>
        </member>
        <member name="F:structures.StructureFactory.factory_">
            <summary> Premenna triedy obsahujuca odkaz na jedinu instanciu triedy. </summary>
        </member>
        <member name="T:structures.StructureFactory">
            <summary>
Trieda spravujuce tovarne na tvorbu struktur. 
Navrhnuta podla vzoru Signleton.
</summary>
        </member>
        <member name="M:structures.ADTFactoryManager.factoriesSize">
            <summary> Vrati pocet tovarni struktur. </summary>
            <returns> Pocet tovarni struktur. </returns>
        </member>
        <member name="M:structures.ADTFactoryManager.getADSFactoryByIndex(System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Vrati ADSFactory na zaklade jej indexu v manazerovi. </summary>
            <param name="index"> Index ADSFactory v manazerovi. </param>
            <returns> ADSFactory. </returns>
        </member>
        <member name="M:structures.ADTFactoryManager.getADSFactoryByType(structures.StructureADS!System.Runtime.CompilerServices.IsConst)">
            <summary> Vrati ADSFactory na zaklade typu struktur, ktore vytvara. </summary>
            <param name="ads"> Typ vytvaranych struktur. </param>
            <returns> ADSFactory vytvarajuce struktury daneho typu. </returns>
        </member>
        <member name="M:structures.ADTFactoryManager.removeStructure(System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Odstrani strukturu. </summary>
            <param name="index"> Index odstranenej struktury. </param>
        </member>
        <member name="M:structures.ADTFactoryManager.cloneStructureAtIndex(System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Sklonuje strukturu na indexe. </summary>
            <param name="index"> Index sklonovanej struktury. </param>
        </member>
        <member name="M:structures.ADTFactoryManager.getStructureInstance(structures.StructureADS)">
            <summary> 
Tovarenska metoda pre ziskanie instancie konkrenej ADS pomocou prislusnej tovarne. 
Vytvorenu strukturu zaregistruje do seba.
Ak pre ADS neexistuje tovaren, vyhodi vynimku logic_error.
</summary>
            <param name="ads"> Typ tovarne, z ktorej sa vytvori struktura. </param>
            <returns> Vytvorena struktura daneho ADS. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak neexistuje tovaren s tymto ads. </exception>
        </member>
        <member name="M:structures.ADTFactoryManager.registerPrototype(structures.StructureADS,structures.Structure*)">
            <summary> 
Zaregistruje prototyp do prislusnej ADSFactory.
Ak este nema vytvorenu tovaren pre prototyp konkretneho ads, tak ju vytvori.
V opacnom pripade vyhodi vynimku logic_error.
</summary>
            <param name="ads"> ADS tovarne, do ktorej bude prototyp registrovany. </param>
            <param name="prototype"> Prototyp struktur. </param>
            <exception cref="T:std.logic_error"> Vyhodena, ak uz existuje tovaren s tymto ads a zaregistrovanym prototypom. </exception>
        </member>
        <member name="M:structures.ADTFactoryManager.size">
            <summary> Vrati aktualny pocet vytvorenych struktur. </summary>
            <returns> Aktualny pocet klonov. </returns>
        </member>
        <member name="M:structures.ADTFactoryManager.at(System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Vrati vytvorenu strukturu na danom indexe. Ak je index neplatny, vrati nullptr. </summary>
            <param name="index"> Index vytvorenej struktury. </param>
            <returns> Vytvorena struktura na danom indexe. </returns>
        </member>
        <member name="M:structures.ADTFactoryManager.op_Subscript(System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Vrati vytvorenu strukturu na danom indexe. Ak je index neplatny, vrati nullptr. </summary>
            <param name="index"> Index vytvorenej struktury. </param>
            <returns> Vytvorena struktura na danom indexe. </returns>
        </member>
        <member name="M:structures.ADTFactoryManager.getADT">
            <summary> Getter atributu adt_. </summary>
            <returns> Hodnota atributu adt_. </returns>
        </member>
        <member name="M:structures.ADTFactoryManager.Dispose">
            <summary> Destruktor zrusi vsetky tovarne v manazerovi. </summary>
        </member>
        <member name="M:structures.ADTFactoryManager.#ctor(structures.StructureADT)">
            <summary> Vytvori instanciu ADT manazera. </summary>
            <param name="adt"> Typ ADT, ktory tento manazer spravuje. </param>
        </member>
        <member name="F:structures.ADTFactoryManager.producedStructures_">
            <summary> Zoznam vsetkych struktur, ktore boli vyprodukovane ADS tovarnami. </summary>
        </member>
        <member name="F:structures.ADTFactoryManager.adsFactories_">
            <summary> Tovarne na tvorbu jednotlivych ADS, ktore patria pod ADT. </summary>
        </member>
        <member name="F:structures.ADTFactoryManager.adt_">
            <summary> Aky ADT uchovava. </summary>
        </member>
        <member name="F:structures.ADTFactoryManager.StructureOrigin.adsFactory">
            <summary> Tovaren. </summary>
        </member>
        <member name="F:structures.ADTFactoryManager.StructureOrigin.structure">
            <summary> Struktura. </summary>
        </member>
        <member name="T:structures.ADTFactoryManager.StructureOrigin">
            <summary> Prepravka na spojenie struktury s jej ADS tovarnou. </summary>
        </member>
        <member name="T:structures.ADTFactoryManager">
            <summary>
Trieda je zodpovedna za vytvaranie struktur pre pozadovane ADT. 
Manazuje zoznam tovarni ADS, ktore vytvaraju jednotlive struktury.
Uchovava zoznam vsetkych struktur, ktore jednotlive ADS tovarne vytvorili.
</summary>
        </member>
        <member name="M:structures.ADSFactory.removeStructure(structures.Structure*)">
            <summary> Odstrani strukturu. </summary>
            <param name="structure"> Odkaz na strukturu, ktora sa ma odstranit. </param>
        </member>
        <member name="M:structures.ADSFactory.removeStructure(System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Odstrani strukturu. </summary>
            <param name="index"> Index odstranenej struktury. </param>
        </member>
        <member name="M:structures.ADSFactory.cloneStructure(structures.Structure*)">
            <summary> 
Metoda pre ziskanie klonu udajovej struktury.
Struktura vznikne klonovanim originalu.
Klon je automaticky zaregistrovany do tovarne, ktora sa neskor postara o jeho dealokaciu.
</summary>
            <param name="original"> Original struktury </param>
            <returns> Struktura vytvorena klonovanim originalu. </returns>
        </member>
        <member name="M:structures.ADSFactory.getStructureInstance">
            <summary> 
Tovarenska metoda pre ziskanie instancie udajovej struktury.
Struktura vznikne klonovanim prototypu.
Klon je automaticky zaregistrovany do tovarne, ktora sa neskor postara o jeho dealokaciu.
</summary>
            <returns> Struktura vytvorena klonovanim prototypu. </returns>
        </member>
        <member name="M:structures.ADSFactory.size">
            <summary> Vrati aktualny pocet klonov. </summary>
            <returns> Aktualny pocet klonov. </returns>
        </member>
        <member name="M:structures.ADSFactory.at(System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Vrati strukturu na danom indexe. Ak je index neplatny, vrati nullptr. </summary>
            <param name="index"> Index vytvorenej struktury. </param>
            <returns> Vytvorena struktura na danom indexe. </returns>
        </member>
        <member name="M:structures.ADSFactory.op_Subscript(System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Vrati strukturu na danom indexe. Ak je index neplatny, vrati nullptr. </summary>
            <param name="index"> Index vytvorenej struktury. </param>
            <returns> Vytvorena struktura na danom indexe. </returns>
        </member>
        <member name="M:structures.ADSFactory.getTotalCreated">
            <summary> Getter atributu totalCreated_. </summary>
            <returns> Hodnota atributu totalCreated_. </returns>
        </member>
        <member name="M:structures.ADSFactory.getADS">
            <summary> Getter atributu ads_. </summary>
            <returns> Hodnota atributu ads_. </returns>
        </member>
        <member name="M:structures.ADSFactory.Dispose">
            <summary> Destruktor zrusi vsetky klony a nasledne zrusi prototyp. </summary>
        </member>
        <member name="M:structures.ADSFactory.#ctor(structures.StructureADS,structures.Structure*)">
            <summary> 
Konstruktor vytvori instanciu.
Prevezme prototyp vsetkych struktur, ktore su vytvarane touto triedou.
</summary>
            <param name="ads"> Typ ADS, ktoru tato tovaren vytvara. </param>
            <param name="prototype"> Prototyp pre vytvarane struktury. </param>
            <remarks>
Trieda sa postara o zrusenie prototypu.
</remarks>
        </member>
        <member name="F:structures.ADSFactory.totalCreated_">
            <summary> Celkovy pocet vytvorenych klonov. </summary>
        </member>
        <member name="F:structures.ADSFactory.clones_">
            <summary> Vytvorene klony prototypu. </summary>
        </member>
        <member name="F:structures.ADSFactory.prototype_">
            <summary> Prototyp vsetkych ADS. </summary>
        </member>
        <member name="F:structures.ADSFactory.ads_">
            <summary> Aku ADS vytvara. </summary>
        </member>
        <member name="T:structures.ADSFactory">
            <summary> 
Tovaren na tvorbu instancii udajovych struktur.
Pracuje s vyuzitim vzorov Factory a Prototype.
</summary>
        </member>
        <member name="M:ui.FormMain.InitializeComponent">
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="F:ui.log.Logger.providers_">
            <summary> Zoznam poskytovatelov logovacich sluzieb. </summary>
        </member>
        <member name="F:ui.log.Logger.logger_">
            <summary> Premenna triedy obsahujuca odkaz na jedinu instanciu triedy. </summary>
        </member>
        <member name="M:ui.log.Logger.#ctor">
            <summary> Konstruktor. </summary>
        </member>
        <member name="M:ui.log.Logger.notifyProviders(ui.log.LogType,System.String)">
            <summary> Necha zalogovat kazdeho zaregistrovaneho providera spravu s danym typom. </summary>
            <param name="lt"> Typ spravy. </param>
            <param name="message"> Sprava. </param>
        </member>
        <member name="M:ui.log.Logger.logDebug(System.String)">
            <summary> Zaloguje debugovaciu spravu. </summary>
            <param name="message"> Sprava. </param>
        </member>
        <member name="M:ui.log.Logger.logDebug(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary> Zaloguje debugovaciu spravu. </summary>
            <param name="message"> Sprava. </param>
        </member>
        <member name="M:ui.log.Logger.logWait(System.String)">
            <summary> Zaloguje cakanie. </summary>
            <param name="message"> Sprava. </param>
        </member>
        <member name="M:ui.log.Logger.logWait(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary> Zaloguje cakanie. </summary>
            <param name="message"> Sprava. </param>
        </member>
        <member name="M:ui.log.Logger.logHint(System.String)">
            <summary> Zaloguje oznam. </summary>
            <param name="message"> Sprava. </param>
        </member>
        <member name="M:ui.log.Logger.logHint(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary> Zaloguje oznam. </summary>
            <param name="message"> Sprava. </param>
        </member>
        <member name="M:ui.log.Logger.logWarning(System.String)">
            <summary> Zaloguje vystrahu. </summary>
            <param name="message"> Sprava. </param>
        </member>
        <member name="M:ui.log.Logger.logWarning(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary> Zaloguje vystrahu. </summary>
            <param name="message"> Sprava. </param>
        </member>
        <member name="M:ui.log.Logger.logError(System.String)">
            <summary> Zaloguje chybu. </summary>
            <param name="message"> Sprava. </param>
        </member>
        <member name="M:ui.log.Logger.logError(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary> Zaloguje chybu. </summary>
            <param name="message"> Sprava. </param>
        </member>
        <member name="M:ui.log.Logger.unregisterProvider(ui.log.ILoggerProvider)">
            <summary> Odregistruje poskytovatela logovacich sluzieb. </summary>
            <param name="provider"> Poskytovatel logovacich sluzieb. </param>
            <returns> true, ak sa podarilo poskytovatela odregistrovat, false inak. </returns>
        </member>
        <member name="M:ui.log.Logger.registerProvider(ui.log.ILoggerProvider)">
            <summary> Zaregistruje poskytovatela logovacich sluzieb. </summary>
            <param name="provider"> Poskytovatel logovacich sluzieb. </param>
            <returns> true, ak sa podarilo poskytovatela zaregistrovat, false inak. </returns>
        </member>
        <member name="M:ui.log.Logger.getInstance">
            <summary> Jednoducha tovarenska metoda pre ziskanie instancie jedinacika </summary>
            <returns> Instancia triedy logger. </returns>
            <remarks> Instancia je inicializovana pomocou lazy initialization. O jej spravu sa stara trieda. </remarks>
        </member>
        <member name="T:ui.log.Logger">
            <summary>
Trieda predstavuje centralny bod pre logovanie. 
Je navrhnuta podla vzoru Mediator a Singleton.
Spolupracuje s triedami ILogger, ktore notifikuje o zmenach.
</summary>
        </member>
        <member name="M:ui.log.ILoggerProvider.log(ui.log.LogType,System.String)">
            <summary> Zaloguje spravu daneho typu. </summary>
            <param name="lt"> Typ spravy. </param>
            <param name="message"> Sprava. </param>
        </member>
        <member name="T:ui.log.ILoggerProvider">
            <summary> 
Rozhranie, ktore musia implementovat triedy poskytujuce logovanie. 
Navrh vychadza zo vzoru Mediator.
</summary>
        </member>
        <member name="T:ui.log.LogType">
            <summary> Rozne druhy logov. </summary>
        </member>
        <member name="M:ui.PanelSorting.InitializeComponent">
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="M:ui.PanelSorting.initialize">
            <summary> Inicializuje panel triedeni. </summary>
            <remarks> Je automaticky volana z metody createAndIntegratePanelSorting. </remarks>
        </member>
        <member name="M:ui.PanelSorting.Dispose">
            <summary> Destruktor. </summary>
        </member>
        <member name="M:ui.PanelSorting.#ctor">
            <summary> Chraneny konstruktor umoznuje vytvarat instance iba pomocou metody createAndIntegratePanelSorting. </summary>
        </member>
        <member name="M:ui.PanelSorting.createAndIntegratePanelSorting(System.Windows.Forms.Panel)">
            <summary> Vytvori a vlozi panel pre ovladanie struktur do daneho komponentu. </summary>
            <param name="owner"> Vlastnik panela so strukturami. Mal by to byt iny prazdny panel. </param>
            <returns> Vytvoreny panel pre ovladanie struktur. </returns>
        </member>
        <member name="F:ui.UISortNotifier.panelSorting_">
            <summary> Odkaz na panel s triedenim. </summary>
        </member>
        <member name="M:ui.UISortNotifier.doNotify">
            <summary> Vyvolanie notifikacie. </summary>
        </member>
        <member name="M:ui.UISortNotifier.#ctor(ui.PanelSorting*)">
            <summary> Parametricky konstruktor. </summary>
            <param name="panelSorting"> Odkaz na panel s triedenim. </param>
        </member>
        <member name="T:ui.UISortNotifier">
            <summary> Notifikacny objekt rozhrania s triedenim. </summary>
        </member>
        <member name="M:structures.SortNotifier.doNotify">
            <summary> Vyvolanie notifikacie. </summary>
        </member>
        <member name="M:structures.SortNotifier.notify">
            <summary> Ak moze, vyvola notifikaciu. </summary>
            <remarks> Notifikaciu vyvola, ked sa vyziadala notificationPeriod krat. </remarks>
        </member>
        <member name="M:structures.SortNotifier.#ctor(System.Int32)">
            <summary> Parametricky konstruktor. </summary>
            <param name="notificationPeriod"> Kolko notifikacii neohlasi? </param>
        </member>
        <member name="T:structures.SortNotifier">
            <summary> Notifikacny objekt. </summary>
        </member>
        <member name="F:structures.Vector.size_">
            <summary> Pocet bytov vo vektore. </summary>
        </member>
        <member name="F:structures.Vector.memory_">
            <summary> Ukazovatel na zaciatok pamate patriacej vektoru. </summary>
        </member>
        <member name="M:structures.Vector.copy(structures.Vector!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,structures.Vector*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Skopiruje length bytov z vektora src od pozicie srcStartIndex do vektora dest od pozicie destStartIndex. </summary>
            <param name="src"> Zdrojovy vektor. </param>
            <param name="srcStartIndex"> Index byte-u vo vektore src, od ktoreho sa zacne citat. </param>
            <param name="dest"> Cielovy vektor. </param>
            <param name="destStartIndex"> Index byte-u vo vektore dest, od ktoreho sa zacne zapisovat. </param>
            <param name="length"> Pocet bytov, ktore budu skopirovane z vektora src od pozicie srcStartIndex do vektora dest od pozicie destStartIndex. </param>
            <exception cref="T:std.out_of_range"> Vyhodena, ak zaciatocne alebo koncove indexy nepatria do prislusnych vektorov. </exception>
        </member>
        <member name="M:structures.Vector.getBytePointer(System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Vrati ukazovatel na byte na danom indexe. </summary>
            <param name="index"> Index byte-u. </param>
            <returns> Ukazovatel na byte na danom indexe. </returns>
            <exception cref="T:std.out_of_range"> Vyhodena, ak index nepatri do vektoru. </exception>
        </member>
        <member name="M:structures.Vector.readBytes(System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Byte*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Precita count bytov od daneho indexu do cielovej adresy dest. </summary>
            <param name="index"> Index byte-u vo vektore, od ktoreho sa zacne citat. </param>
            <param name="count"> Pocet bytov, ktore budu skopirovane z vektora od pozicie index do pamate dest. </param>
            <param name="dest"> Pamat, do ktorej sa bude zapisovat. </param>
            <returns> dest. </returns>
            <exception cref="T:std.out_of_range"> Vyhodena, ak pociatocny ani cielovy index nepatria do vektora. </exception>
        </member>
        <member name="M:structures.Vector.op_Subscript(System.Int32!System.Runtime.CompilerServices.IsConst)">
            <summary> Vrati adresou byte na indexe. </summary>
            <param name="index"> Index byte-u. </param>
            <returns> Adresa byte-u na danom indexe. </returns>
            <exception cref="T:std.out_of_range"> Vyhodena, ak index nepatri do vektoru. </exception>
            <summary> Vrati hodnotou byte na indexe. </summary>
            <param name="index"> Index byte-u. </param>
            <returns> Hodnota byte-u na danom indexe. </returns>
            <exception cref="T:std.out_of_range"> Vyhodena, ak index nepatri do vektoru. </exception>
        </member>
        <member name="M:structures.Vector.op_Equality(structures.Vector!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator porovnania. </summary>
            <param name="other"> Vektor, s ktorym sa ma porovnat. </param>
            <returns> true, ak su vektory rovnake, false inak. </returns>
        </member>
        <member name="M:structures.Vector.op_Assign(structures.Vector!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Vektor, z ktoreho sa maju prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa tento vektor nachadza po priradeni. </returns>
        </member>
        <member name="M:structures.Vector.op_Assign(structures.Structure!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Struktura (vektor), z ktorej ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa tento vektor nachadza po priradeni. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, vstupny parameter nie je Vector. </exception>
            <remarks> Vyuziva typovy operator priradenia. </remarks>
        </member>
        <member name="M:structures.Vector.size">
            <summary> Vrati pocet bytov vo vektore. </summary>
            <returns> Pocet bytov vo vektore. </returns>
        </member>
        <member name="M:structures.Vector.clone">
            <summary> Operacia klonovania. Vytvori a vrati duplikat vektora. </summary>
            <returns> Ukazovatel na vytvoreny klon vektora. </returns>
        </member>
        <member name="M:structures.Vector.Dispose">
            <summary> Destruktor. </summary>
        </member>
        <member name="M:structures.Vector.#ctor(structures.Vector!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Kopirovaci konstruktor. </summary>
            <param name="other"> Zdrojovy vektor. </param>
        </member>
        <member name="M:structures.Vector.#ctor(System.UInt64)">
            <summary> Konstruktor vytvori vektor o velkosti size bytov. </summary>
            <param name="size"> Pocet bytov vo vytvorenom vektore. </param>
        </member>
        <member name="T:structures.Vector">
            <summary> Vektor. </summary>
        </member>
        <member name="M:structures.BiStarGraph.getPredecessors(System.Int32,structures.List&lt;structures.GraphEdge**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adresou vrati zoznam vsetkych hran konciacich v danom vrchole. </summary>
            <param name="vertexId"> Id vrcholu, ktoreho predchodcov chceme ziskat. </param>
            <param name="list"> Referencia na zoznam, do ktoreho sa vlozia smerniky na hrany konciace v danom vrchole. </param>
            <returns> Adresa, na ktorej sa nachadza zoznam naplneny smernikmi na hrany konciace v danom vrchole. </returns>
            <remarks> Navratova hodnota sa zhoduje s adresou, na ktorej sa nachadza argument list. </remarks>
        </member>
        <member name="M:structures.BiStarGraph.removeEdge(System.Int32,System.Int32)">
            <summary> Odstrani z grafu hranu. </summary>
            <param name="beginVertexId"> Id pociatocneho vrcholu. </param>
            <param name="endVertexId"> Id koncoveho vrcholu. </param>
            <exception cref="T:std.logic_error"> Vyhodena, ak dana hrana neexistuje. </exception>
        </member>
        <member name="M:structures.BiStarGraph.createEdge(System.Int32,System.Int32)">
            <summary> Vytvori orientovanu hranu v grafe. </summary>
            <param name="beginVertexId"> Id pociatocneho vrcholu. </param>
            <param name="endVertexId"> Id koncoveho vrcholu. </param>
            <returns> Smernik na vytvorenu hranu. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak aspon jeden z vrcholov v grafe neexistuje. </exception>
        </member>
        <member name="M:structures.BiStarGraph.removeVertex(System.Int32)">
            <summary> Odstrani z grafu vrchol s danym id a vsetky hrany s nim incidentne. </summary>
            <param name="vertexId"> Id ruseneho vrcholu. </param>
            <exception cref="T:std.logic_error"> Vyhodena, ak vrchol s danym id neexistuje. </exception>
        </member>
        <member name="M:structures.BiStarGraph.createVertex(System.Int32)">
            <summary> Vytvori vrchol s danym id v grafe. </summary>
            <param name="vertexId"> Id vytvaraneho vrcholu. </param>
            <returns> Smernik na vytvoreny vrchol. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak vrchol s danym id uz existuje. </exception>
        </member>
        <member name="M:structures.BiStarGraph.op_Assign(structures.BiStarGraph!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Graf typu BiStarGraph, z ktoreho ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa tento graf nachadza po priradeni. </returns>
        </member>
        <member name="M:structures.BiStarGraph.op_Assign(structures.ForwardStarGraph!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Graf typu ForwardStarGraph, z ktoreho ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa tento graf nachadza po priradeni. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak vstupny parameter nie je typu BiStarGraph. </exception>
            <remarks> Vyuziva typovy operator priradenia. </remarks>
        </member>
        <member name="M:structures.BiStarGraph.clone">
            <summary> Operacia klonovania. Vytvori a vrati duplikat udajovej struktury (grafu typu BiStarGraph). </summary>
            <returns> Ukazovatel na klon struktury. </returns>
        </member>
        <member name="M:structures.BiStarGraph.#ctor(structures.BiStarGraph!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Kopirovaci konstruktor. </summary>
            <param name="other"> Graf typu BiStarGraph, z ktoreho sa prevezmu vlastnosti. </param>
        </member>
        <member name="M:structures.BiStarGraph.#ctor">
            <summary> Konstruktor. </summary>
        </member>
        <member name="T:structures.BiStarGraph">
            <summary> Graf implementovany ako zoznam obojsmernych hviezd. </summary>
        </member>
        <member name="F:structures.GraphVertexBiStar.backwardEdges_">
            <summary> Smernik na tabulku, v ktorej sa uchovavaju hrany vstupujuce do vrchola hviezdy. </summary>
            <remarks>
Klucom je adresa pociatocneho vrchola hrany vstupujucej do vrchola hviezdy.
Hodnotou je smernik na prislusnu hranu.
</remarks>
        </member>
        <member name="M:structures.GraphVertexBiStar.#ctor(structures.GraphVertexBiStar!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Kopirovaci konstruktor. </summary>
            <param name="other"> Obojsmerna hviezda, z ktorej sa prevezmu vlastnosti. </param>
            <remarks> Konstruktor vytvara kopiu, ktora ma prazdne zoznamy hran vychadzajucich a vstupujucich do vrchol hviezdy. </remarks>
        </member>
        <member name="M:structures.GraphVertexBiStar.getBackwardEdges(structures.List&lt;structures.GraphEdge**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adresou vrati zoznam vsetkych hran vstupujucich do vrchola hviezdy. </summary>
            <param name="list"> Referencia na zoznam, do ktoreho sa vlozia smerniky na vsetky hrany vstupujuce do vrchola hviezdy. </param>
            <returns> Adresa, na ktorej sa nachadza zoznam naplneny smernikmi na vsetky hrany vstupujuce do vrchola hviezdy. </returns>
            <remarks> Navratova hodnota sa zhoduje s adresou, na ktorej sa nachadza argument list. </remarks>
        </member>
        <member name="M:structures.GraphVertexBiStar.getBackwardEdge(structures.GraphVertex*)">
            <summary> Vrati orientovanu hranu zacinajucu v danom vrchole. </summary>
            <param name="beginVertex"> Smernik na pociatocny vrchol hladanej hrany. </param>
            <returns> Smernik na hranu, ktora zacina v danom vrchole a konci vo vrchole tejto hviezdy. </returns>
            <exception cref="T:std.logic_error">
Vyhodena, ak sa vo hviezde nenachadza hrana zacinajuca
v danom vrchole a konciaca vo vrchole tejto hviezdy.
</exception>
        </member>
        <member name="M:structures.GraphVertexBiStar.removeBackwardEdges(structures.List&lt;structures.GraphEdge**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Odstrani a adresou vrati zoznam vsetkych hran vstupujucich do vrchola hviezdy. </summary>
            <param name="list"> Referencia na zoznam, do ktoreho sa vlozia smerniky na vsetky hrany vstupujuce do vrchola hviezdy. </param>
            <returns> Adresa, na ktorej sa nachadza zoznam naplneny smernikmi na vsetky hrany vstupujuce do vrchola hviezdy. </returns>
            <remarks> Navratova hodnota sa zhoduje s adresou, na ktorej sa nachadza argument list. </remarks>
        </member>
        <member name="M:structures.GraphVertexBiStar.removeBackwardEdge(structures.GraphVertex*)">
            <summary> Odstrani z hviezdy orientovanu hranu vstupujucu do vrchola hviezdy. </summary>
            <param name="beginVertex"> Smernik na pociatocny vrchol odstranovanej hrany. </param>
            <returns> Smernik na hranu, ktora zacina v danom vrchole a konci vo vrchole tejto hviezdy. </returns>
            <exception cref="T:std.logic_error">
Vyhodena, ak sa vo hviezde nenachadza hrana zacinajuca
v danom vrchole a konciaca vo vrchole tejto hviezdy.
</exception>
        </member>
        <member name="M:structures.GraphVertexBiStar.tryRemoveBackwardEdge(structures.GraphEdge*)">
            <summary> Pokusi sa odstranit z hviezdy orientovanu hranu vstupujucu do vrchola hviezdy. </summary>
            <param name="edge"> Smernik na odstranovanu hranu. </param>
            <returns> true, ak sa hranu podarilo odstranit, false inak. </returns>
            <remarks>
Hranu sa nepodari odstranit v pripade, ak je koncovy vrchol hrany rozny od vrchola tejto hviezdy
alebo ak sa dana hrana nenachadza v zozname hran vstupujucich do vrchola hviezdy.
</remarks>
        </member>
        <member name="M:structures.GraphVertexBiStar.tryInsertBackwardEdge(structures.GraphEdge*)">
            <summary> Pokusi sa vlozit do hviezdy orientovanu hranu vstupujucu do vrchola hviezdy. </summary>
            <param name="edge"> Smernik na vkladanu hranu. </param>
            <returns> true, ak sa hranu podarilo vlozit, false inak. </returns>
            <remarks>
Hranu sa nepodari vlozit v pripade, ak je koncovy vrchol hrany rozny od vrchola tejto hviezdy
alebo ak sa dana hrana uz nachadza v zozname hran vstupujucich do vrchola hviezdy.
</remarks>
        </member>
        <member name="M:structures.GraphVertexBiStar.containsBackwardEdge(structures.GraphVertex*)">
            <summary> Zisti, ci do vrchola hviezdy vstupuje hrana zacinajuca v danom vrchole. </summary>
            <param name="beginVertex"> Smernik na zaciatocny vrchol hrany. </param>
            <returns> true, ak do vrchola hviezdy vstupuje hrana zacinajuca v danom vrchole, false inak. </returns>
        </member>
        <member name="M:structures.GraphVertexBiStar.op_Assign(structures.GraphVertexBiStar!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Explicitne zakazanie operatora priradenia. </summary>
            <remarks> Nad obojsmernou hviezdou nie je mozne definovat operator priradenia. </remarks>
        </member>
        <member name="M:structures.GraphVertexBiStar.clone(structures.Graph!System.Runtime.CompilerServices.IsConst*)">
            <summary> Operacia klonovania. Vytvori a vrati ciastocny duplikat obojsmernej hviezdy. </summary>
            <param name="graph"> Smernik na graf, v ktorom sa bude nachadzat vytvoreny klon obojsmernej hviezdy. </param>
            <returns> Ukazovatel na klon obojsmernej hviezdy. </returns>
            <remarks> Metoda vytvara klon s prazdnymi zoznamami hran. </remarks>
        </member>
        <member name="M:structures.GraphVertexBiStar.Dispose">
            <summary> Destruktor. </summary>
        </member>
        <member name="M:structures.GraphVertexBiStar.#ctor(structures.Graph!System.Runtime.CompilerServices.IsConst*,System.Int32,structures.Table&lt;structures.GraphVertex**,structures.GraphEdge**&gt;*,structures.Table&lt;structures.GraphVertex**,structures.GraphEdge**&gt;*)">
            <summary> Konstruktor. </summary>
            <param name="graph"> Smernik na graf, v ktorom sa bude obojsmerna hviezda nachadzat. </param>
            <param name="vertexId"> Id vrcholu hviezdy. </param>
            <param name="forwardEdges"> Tabulka, v ktorej sa budu uchovavat smerniky na hrany vychadzajuce z vrcholu s danym id. </param>
            <param name="backwardEdges"> Tabulka, v ktorej sa budu uchovavat smerniky na hrany vstupujuce do vrcholu s danym id. </param>
        </member>
        <member name="T:structures.GraphVertexBiStar">
            <summary>
Obojsmerna hviezda. Je tvorena vrcholom, zoznamom vsetkych hran, ktore z neho vychadzaju,
a zoznamom vsetkych hran, ktore do neho vchadzaju.
</summary>
        </member>
        <member name="F:structures.ForwardStarGraph.vertices_">
            <summary> Smernik na tabulku, v ktorej sa uchovavaju vsetky hviezdy grafu. </summary>
            <remarks>
Klucom je id vrchola konkretnej hviezdy.
Hodnotou je smernik na prislusnu hviezdu.
</remarks>
        </member>
        <member name="M:structures.ForwardStarGraph.getPredecessors(System.Int32,structures.List&lt;structures.GraphEdge**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adresou vrati zoznam vsetkych hran konciacich v danom vrchole. </summary>
            <param name="vertexId"> Id vrcholu, ktoreho predchodcov chceme ziskat. </param>
            <param name="list"> Referencia na zoznam, do ktoreho sa vlozia smerniky na hrany konciace v danom vrchole. </param>
            <returns> Adresa, na ktorej sa nachadza zoznam naplneny smernikmi na hrany konciace v danom vrchole. </returns>
            <remarks> Navratova hodnota sa zhoduje s adresou, na ktorej sa nachadza argument list. </remarks>
        </member>
        <member name="M:structures.ForwardStarGraph.getSuccessors(System.Int32,structures.List&lt;structures.GraphEdge**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adresou vrati zoznam vsetkych hran zacinajucich v danom vrchole. </summary>
            <param name="vertexId"> Id vrcholu, ktoreho nasledovnikov chceme ziskat. </param>
            <param name="list"> Referencia na zoznam, do ktoreho sa vlozia smerniky na hrany zacianajuce v danom vrchole. </param>
            <returns> Adresa, na ktorej sa nachadza zoznam naplneny smernikmi na hrany zacianajuce v danom vrchole. </returns>
            <remarks> Navratova hodnota sa zhoduje s adresou, na ktorej sa nachadza argument list. </remarks>
        </member>
        <member name="M:structures.ForwardStarGraph.getEdges(structures.List&lt;structures.GraphEdge**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adresou vrati zoznam vsetkych hran grafu. </summary>
            <param name="list"> Referencia na zoznam, do ktoreho sa vlozia smerniky na vsetky hrany grafu. </param>
            <returns> Adresa, na ktorej sa nachadza zoznam naplneny smernikmi na vsetky hrany grafu. </returns>
            <remarks> Navratova hodnota sa zhoduje s adresou, na ktorej sa nachadza argument list. </remarks>
        </member>
        <member name="M:structures.ForwardStarGraph.getEdge(System.Int32,System.Int32)">
            <summary> Vrati orientovanu hranu spajajucu vrcholy s danymi id. </summary>
            <param name="beginVertexId"> Id pociatocneho vrcholu. </param>
            <param name="endVertexId"> Id koncoveho vrcholu. </param>
            <returns> Smernik na hranu grafu. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak medzi danymi vrcholmi neexistuje orientovana hrana. </exception>
        </member>
        <member name="M:structures.ForwardStarGraph.getVertices(structures.List&lt;structures.GraphVertex**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adresou vrati zoznam vsetkych vrcholov grafu. </summary>
            <param name="list"> Referencia na zoznam, do ktoreho sa vlozia smerniky na vsetky vrcholy grafu. </param>
            <returns> Adresa, na ktorej sa nachadza zoznam naplneny smernikmi na vsetky vrcholy grafu. </returns>
            <remarks> Navratova hodnota sa zhoduje s adresou, na ktorej sa nachadza argument list. </remarks>
        </member>
        <member name="M:structures.ForwardStarGraph.getVertex(System.Int32)">
            <summary> Vrati vrchol s danym id. </summary>
            <param name="vertexId"> Id vrcholu. </param>
            <returns> Smernik na vrchol grafu. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak vrchol s danym id v grafe neexistuje. </exception>
        </member>
        <member name="M:structures.ForwardStarGraph.removeEdge(structures.GraphEdge*)">
            <summary> Odstrani z grafu danu hranu. </summary>
            <param name="edge"> Smernik na rusenu hranu. </param>
            <exception cref="T:std.logic_error"> Vyhodena, ak dana hrana v grafe neexistuje. </exception>
            <remarks>
Ak sa hranu podari odstranit z grafu, parameter edge sa stane dangling pointerom.
Metoda vyvolava metodu removeEdge(int, int).
</remarks>
        </member>
        <member name="M:structures.ForwardStarGraph.removeEdge(System.Int32,System.Int32)">
            <summary> Odstrani z grafu hranu. </summary>
            <param name="beginVertexId"> Id pociatocneho vrcholu. </param>
            <param name="endVertexId"> Id koncoveho vrcholu. </param>
            <exception cref="T:std.logic_error"> Vyhodena, ak dana hrana neexistuje. </exception>
        </member>
        <member name="M:structures.ForwardStarGraph.createEdge(System.Int32,System.Int32)">
            <summary> Vytvori orientovanu hranu v grafe. </summary>
            <param name="beginVertexId"> Id pociatocneho vrcholu. </param>
            <param name="endVertexId"> Id koncoveho vrcholu. </param>
            <returns> Smernik na vytvorenu hranu. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak aspon jeden z vrcholov v grafe neexistuje. </exception>
        </member>
        <member name="M:structures.ForwardStarGraph.removeVertex(structures.GraphVertex*)">
            <summary> Odstrani z grafu dany vrchol a vsetky hrany s nim incidentne. </summary>
            <param name="vertex"> Smernik na ruseny vrchol. </param>
            <exception cref="T:std.logic_error"> Vyhodena, ak dany vrchol v grafe neexistuje. </exception>
            <remarks> Ak sa vrchol podari odstranit z grafu, parameter vertex sa stane dangling pointerom. </remarks>
            <remarks>
Ak sa vrchol podari odstranit z grafu, parameter vertex sa stane dangling pointerom.
Metoda vyvolava metodu removeVertex(int).
</remarks>
        </member>
        <member name="M:structures.ForwardStarGraph.removeVertex(System.Int32)">
            <summary> Odstrani z grafu vrchol s danym id a vsetky hrany s nim incidentne. </summary>
            <param name="vertexId"> Id ruseneho vrcholu. </param>
            <exception cref="T:std.logic_error"> Vyhodena, ak vrchol s danym id neexistuje. </exception>
        </member>
        <member name="M:structures.ForwardStarGraph.createVertex(System.Int32)">
            <summary> Vytvori vrchol s danym id v grafe. </summary>
            <param name="vertexId"> Id vytvaraneho vrcholu. </param>
            <returns> Smernik na vytvoreny vrchol. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak vrchol s danym id uz existuje. </exception>
        </member>
        <member name="M:structures.ForwardStarGraph.clear">
            <summary> Vymaze obsah grafu, t.j. vrcholy a hrany. Neodstrani zaregistrovane typy dat. </summary>
        </member>
        <member name="M:structures.ForwardStarGraph.size">
            <summary> Vrati pocet vrcholov v grafe. </summary>
            <returns> Pocet vrcholov v grafe. </returns>
        </member>
        <member name="M:structures.ForwardStarGraph.op_Assign(structures.ForwardStarGraph!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Graf typu ForwardStarGraph, z ktoreho ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa tento graf nachadza po priradeni. </returns>
        </member>
        <member name="M:structures.ForwardStarGraph.op_Assign(structures.GraphWithRegistration!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Graf s podporou registracie, z ktoreho ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa tento graf nachadza po priradeni. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak vstupny parameter nie je typu ForwardStarGraph. </exception>
            <remarks> Vyuziva typovy operator priradenia. </remarks>
        </member>
        <member name="M:structures.ForwardStarGraph.clone">
            <summary> Operacia klonovania. Vytvori a vrati duplikat udajovej struktury (grafu typu ForwardStarGraph). </summary>
            <returns> Ukazovatel na klon struktury. </returns>
        </member>
        <member name="M:structures.ForwardStarGraph.Dispose">
            <summary> Destruktor. </summary>
        </member>
        <member name="M:structures.ForwardStarGraph.#ctor(structures.ForwardStarGraph!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Kopirovaci konstruktor. </summary>
            <param name="other"> Graf typu ForwardStarGraph, z ktoreho sa prevezmu vlastnosti. </param>
        </member>
        <member name="M:structures.ForwardStarGraph.#ctor">
            <summary> Konstruktor. </summary>
        </member>
        <member name="T:structures.ForwardStarGraph">
            <summary> Graf implementovany ako zoznam doprednych hviezd. </summary>
        </member>
        <member name="F:structures.GraphVertexForwardStar.forwardEdges_">
            <summary> Smernik na tabulku, v ktorej sa uchovavaju hrany vychadzajuce z vrchola hviezdy. </summary>
            <remarks>
Klucom je adresa koncoveho vrchola hrany vychadzajucej z vrchola hviezdy.
Hodnotou je smernik na prislusnu hranu.
</remarks>
        </member>
        <member name="M:structures.GraphVertexForwardStar.#ctor(structures.GraphVertexForwardStar!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Kopirovaci konstruktor. </summary>
            <param name="other"> Dopredna hviezda, z ktorej sa prevezmu vlastnosti. </param>
            <remarks> Konstruktor vytvara kopiu, ktora ma prazdny zoznam hran vychadzajucich z vrchola hviezdy. </remarks>
        </member>
        <member name="M:structures.GraphVertexForwardStar.getForwardEdges(structures.List&lt;structures.GraphEdge**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adresou vrati zoznam vsetkych hran vychadzajucich z vrchola hviezdy. </summary>
            <param name="list"> Referencia na zoznam, do ktoreho sa vlozia smerniky na vsetky hrany vychadzajuce z vrchola hviezdy. </param>
            <returns> Adresa, na ktorej sa nachadza zoznam naplneny smernikmi na vsetky hrany vychadzajuce z vrchola hviezdy. </returns>
            <remarks> Navratova hodnota sa zhoduje s adresou, na ktorej sa nachadza argument list. </remarks>
        </member>
        <member name="M:structures.GraphVertexForwardStar.getForwardEdge(structures.GraphVertex*)">
            <summary> Vrati orientovanu hranu konciacu v danom vrchole. </summary>
            <param name="endVertex"> Smernik na koncovy vrchol hladanej hrany. </param>
            <returns> Smernik na hranu, ktora zacina vo vrchole tejto hviezdy a konci v danom vrchole. </returns>
            <exception cref="T:std.logic_error">
Vyhodena, ak sa vo hviezde nenachadza hrana zacinajuca
vo vrchole tejto hviezdy a konciaca v danom vrchole.
</exception>
        </member>
        <member name="M:structures.GraphVertexForwardStar.removeForwardEdges(structures.List&lt;structures.GraphEdge**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Odstrani a adresou vrati zoznam vsetkych hran vychadzajucich z vrchola hviezdy. </summary>
            <param name="list"> Referencia na zoznam, do ktoreho sa vlozia smerniky na vsetky hrany vychadzajuce z vrchola hviezdy. </param>
            <returns> Adresa, na ktorej sa nachadza zoznam naplneny smernikmi na vsetky hrany vychadzajuce z vrchola hviezdy. </returns>
            <remarks> Navratova hodnota sa zhoduje s adresou, na ktorej sa nachadza argument list. </remarks>
        </member>
        <member name="M:structures.GraphVertexForwardStar.removeForwardEdge(structures.GraphVertex*)">
            <summary> Odstrani z hviezdy orientovanu hranu vychadzajucu z vrchola hviezdy. </summary>
            <param name="endVertex"> Smernik na koncovy vrchol odstranovanej hrany. </param>
            <returns> Smernik na hranu, ktora zacina vo vrchole tejto hviezdy a konci v danom vrchole. </returns>
            <exception cref="T:std.logic_error">
Vyhodena, ak sa vo hviezde nenachadza hrana zacinajuca
vo vrchole tejto hviezdy a konciaca v danom vrchole.
</exception>
        </member>
        <member name="M:structures.GraphVertexForwardStar.tryRemoveForwardEdge(structures.GraphEdge*)">
            <summary> Pokusi sa odstranit z hviezdy orientovanu hranu vychadzajucu z vrchola hviezdy. </summary>
            <param name="edge"> Smernik na odstranovanu hranu. </param>
            <returns> true, ak sa hranu podarilo odstranit, false inak. </returns>
            <remarks>
Hranu sa nepodari odstranit v pripade, ak je pociatocny vrchol hrany rozny od vrchola tejto hviezdy
alebo ak sa dana hrana nenachadza v zozname hran vychadzajucich z vrchola hviezdy.
</remarks>
        </member>
        <member name="M:structures.GraphVertexForwardStar.tryInsertForwardEdge(structures.GraphEdge*)">
            <summary> Pokusi sa vlozit do hviezdy orientovanu hranu vychadzajucu z vrchola hviezdy. </summary>
            <param name="edge"> Smernik na vkladanu hranu. </param>
            <returns> true, ak sa hranu podarilo vlozit, false inak. </returns>
            <remarks>
Hranu sa nepodari vlozit v pripade, ak je pociatocny vrchol hrany rozny od vrchola tejto hviezdy
alebo ak sa dana hrana uz nachadza v zozname hran vychadzajucich z vrchola hviezdy.
</remarks>
        </member>
        <member name="M:structures.GraphVertexForwardStar.containsForwardEdge(structures.GraphVertex*)">
            <summary> Zisti, ci z vrchola hviezdy vychadza hrana konciaca v danom vrchole. </summary>
            <param name="endVertex"> Smernik na koncovy vrchol hrany. </param>
            <returns> true, ak z vrchola hviezdy vychadza hrana konciaca v danom vrchole, false inak. </returns>
        </member>
        <member name="M:structures.GraphVertexForwardStar.op_Assign(structures.GraphVertexForwardStar!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Explicitne zakazanie operatora priradenia. </summary>
            <remarks> Nad doprednou hviezdou nie je mozne definovat operator priradenia. </remarks>
        </member>
        <member name="M:structures.GraphVertexForwardStar.op_Assign(structures.GraphVertex!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Vrchol grafu, z ktoreho ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa tento element grafu nachadza po priradeni. </returns>
            <exception cref="T:std.logic_error"> Vyhodena vzdy. </exception>
            <remarks> Nad doprednou hviezdou nie je mozne definovat operator priradenia. </remarks>
        </member>
        <member name="M:structures.GraphVertexForwardStar.clone(structures.Graph!System.Runtime.CompilerServices.IsConst*)">
            <summary> Operacia klonovania. Vytvori a vrati ciastocny duplikat doprednej hviezdy. </summary>
            <param name="graph"> Smernik na graf, v ktorom sa bude nachadzat vytvoreny klon doprednej hviezdy. </param>
            <returns> Ukazovatel na klon doprednej hviezdy. </returns>
            <remarks> Metoda vytvara klon s prazdnym zoznamom hran. </remarks>
        </member>
        <member name="M:structures.GraphVertexForwardStar.Dispose">
            <summary> Destruktor. </summary>
        </member>
        <member name="M:structures.GraphVertexForwardStar.#ctor(structures.Graph!System.Runtime.CompilerServices.IsConst*,System.Int32,structures.Table&lt;structures.GraphVertex**,structures.GraphEdge**&gt;*)">
            <summary> Konstruktor. </summary>
            <param name="graph"> Smernik na graf, v ktorom sa bude dopredna hviezda nachadzat. </param>
            <param name="vertexId"> Id vrcholu hviezdy. </param>
            <param name="forwardEdges"> Tabulka, v ktorej sa budu uchovavat smerniky na hrany vychadzajuce z vrcholu s danym id. </param>
        </member>
        <member name="T:structures.GraphVertexForwardStar">
            <summary> Dopredna hviezda. Je tvorena vrcholom a zoznamom vsetkych hran, ktore z neho vychadzaju. </summary>
        </member>
        <member name="M:structures.DSRoutines.#ctor">
            <summary> Sukromny konstruktor znemoznuje vytvorenie instancie kniznicnej triedy. </summary>
        </member>
        <member name="M:structures.DSRoutines.getInfinity">
            <summary> Vrati hodnotu predstavujucu kladne nekonecno. </summary>
            <returns> Hodnota nekonecna. </returns>
        </member>
        <member name="M:structures.DSRoutines.rangeCheckExcept(System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.UInt64!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary> Skontroluje, ci index patri do intervalu [baseIndex, baseIndex + size). Ak nie, vyhodi vynimku std::out_of_range. </summary>
            <param name="index"> Testovaný index. </param>
            <param name="baseIndex"> Najnizsi platny index. </param>
            <param name="size"> Pocet prvkov v kolekcii. </param>
            <param name="exceptionMessage"> Text vynimky, ktora je vyhodena v pripade chyby. </param>
            <exception cref="T:std.out_of_range"> Vyhodena, ak index nepatri do intervalu [baseIndex, baseIndex + size). </exception>
        </member>
        <member name="M:structures.DSRoutines.rangeCheckExcept(System.Int32!System.Runtime.CompilerServices.IsConst,System.UInt64!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst)">
            <summary> Skontroluje, ci index patri do intervalu [0, size). Ak nie, vyhodi vynimku std::out_of_range. </summary>
            <param name="index"> Testovaný index. </param>
            <param name="size"> Pocet prvkov v kolekcii. </param>
            <param name="exceptionMessage"> Text vynimky, ktora je vyhodena v pripade chyby. </param>
            <exception cref="T:std.out_of_range"> Vyhodena, ak index nepatri do intervalu [0, size). </exception>
        </member>
        <member name="M:structures.DSRoutines.rangeCheck(System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.UInt64!System.Runtime.CompilerServices.IsConst)">
            <summary> Skontroluje, ci index patri do intervalu [baseIndex, baseIndex + size). </summary>
            <param name="index"> Testovaný index. </param>
            <param name="baseIndex"> Najnizsi platny index. </param>
            <param name="size"> Pocet prvkov v kolekcii. </param>
            <returns> true, ak index patri do intervalu [baseIndex, baseIndex + size), false inak. </returns>
        </member>
        <member name="M:structures.DSRoutines.rangeCheck(System.Int32!System.Runtime.CompilerServices.IsConst,System.UInt64!System.Runtime.CompilerServices.IsConst)">
            <summary> Skontroluje, ci index patri do intervalu [0, size). </summary>
            <param name="index"> Testovaný index. </param>
            <param name="size"> Pocet prvkov v kolekcii. </param>
            <returns> true, ak index patri do intervalu [0, size), false inak. </returns>
        </member>
        <member name="M:structures.DSRoutines.convertADStoADT(structures.StructureADS!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Prekonvertuje ADS do ADT. </summary>
            <param name="ads"> Typ abstraktnej datovej struktury. </param>
            <returns> Abstraktny datovy typ, do ktoreho patri ADS. </returns>
            <exception cref="T:std.invalid_argument"> Vyhodena, ak ADS nepatri do ziadneho ADT. </exception>
        </member>
        <member name="T:structures.DSRoutines">
            <summary> 
Kniznicna trieda obsahujuca rutinne metody pre pracu so strukturami.
</summary>
        </member>
        <member name="F:structures.GraphWithRegistration.registeredEdgeData_">
            <summary> Smernik na tabulku, v ktorej sa uchovavaju identifikatory registrovanych dat,
ktore su asociovane s hranami grafu.
</summary>
            <remarks>
Klucom aj hodnotu je adresa triedy, z ktorej vznikla prislusna instancia dat.
</remarks>
        </member>
        <member name="F:structures.GraphWithRegistration.registeredVertexData_">
            <summary> Smernik na tabulku, v ktorej sa uchovavaju identifikatory registrovanych dat,
ktore su asociovane s vrcholmi grafu.
</summary>
            <remarks>
Klucom aj hodnotu je adresa triedy, z ktorej vznikla prislusna instancia dat.
</remarks>
        </member>
        <member name="M:structures.GraphWithRegistration.tryUnregisterEdgeData(structures.GraphData!System.Runtime.CompilerServices.IsConst*)">
            <summary> Odstrani z grafu data s danym klucom, ktore su asociovane s hranami grafu. </summary>
            <param name="key"> Jedinecny identifikator dat. Jedna sa u adresu triedy, z ktorej vznikla instancia dat. </param>
            <returns> true, ak sa z grafu podarilo odstranit data s danym klucom, false inak. </returns>
        </member>
        <member name="M:structures.GraphWithRegistration.tryUnregisterVertexData(structures.GraphData!System.Runtime.CompilerServices.IsConst*)">
            <summary> Odstrani z grafu data s danym klucom, ktore su asociovane s vrcholmi grafu. </summary>
            <param name="key"> Jedinecny identifikator dat. Jedna sa u adresu triedy, z ktorej vznikla instancia dat. </param>
            <returns> true, ak sa z grafu podarilo odstranit data s danym klucom, false inak. </returns>
        </member>
        <member name="M:structures.GraphWithRegistration.#ctor(structures.Table&lt;structures.GraphData!System.Runtime.CompilerServices.IsConst**,structures.GraphData!System.Runtime.CompilerServices.IsConst**&gt;*,structures.Table&lt;structures.GraphData!System.Runtime.CompilerServices.IsConst**,structures.GraphData!System.Runtime.CompilerServices.IsConst**&gt;*)">
            <summary> Konstruktor. </summary>
            <param name="tableForVertexDataRegistration"> Tabulka, ktora bude uchovavat kluce dat registrovanych pre vrcholy. </param>
            <param name="tableForEdgeDataRegistration"> Tabulka, ktora bude uchovavat kluce dat registrovanych pre hrany. </param>
        </member>
        <member name="M:structures.GraphWithRegistration.unregisterData(structures.GraphDataType,structures.GraphData!System.Runtime.CompilerServices.IsConst*)">
            <summary> Odstrani z grafu data daneho typu s danym klucom. </summary>
            <param name="dataType"> Typ dat - data vrcholu alebo data hrany. </param>
            <param name="key"> Jedinecny identifikator dat. Jedna sa u adresu triedy, z ktorej vznikla instancia dat. </param>
            <exception cref="T:std.logic_error"> Vyhodena, ak v grafe nie je registrovany dany typ dat s danym klucom. </exception>
            <remarks> 
V ramci metody sa vola nad parametrom key metoda getClassKey().
Metoda odstrani dany typ dat s danym klucom zo vsetkych elementov grafu, ktore ich mozu obsahovat.
</remarks>
        </member>
        <member name="M:structures.GraphWithRegistration.registerData(structures.GraphDataType,structures.GraphData!System.Runtime.CompilerServices.IsConst*)">
            <summary> Zaregistruje v grafe data daneho typu s danym klucom. </summary>
            <param name="dataType"> Typ dat - data vrcholu alebo data hrany. </param>
            <param name="key"> Jedinecny identifikator dat. Jedna sa u adresu triedy, z ktorej vznikla instancia dat. </param>
            <exception cref="T:std.logic_error"> Vyhodena, ak uz je v grafe registrovany dany typ dat s danym klucom. </exception>
            <remarks> V ramci metody sa vola nad parametrom key metoda getClassKey(). </remarks>
        </member>
        <member name="M:structures.GraphWithRegistration.areDataRegistered(structures.GraphDataType,structures.GraphData!System.Runtime.CompilerServices.IsConst*)">
            <summary> Zisti, ci v grafe su registrovane data daneho typu s danym klucom. </summary>
            <param name="dataType"> Typ dat - data vrcholu alebo data hrany. </param>
            <param name="key"> Jedinecny identifikator dat. Jedna sa u adresu triedy, z ktorej vznikla instancia dat. </param>
            <returns> true, ak v grafe su registrovane data daneho typu s danym klucom, false inak. </returns>
            <remarks> V ramci metody sa vola nad parametrom key metoda getClassKey(). </remarks>
        </member>
        <member name="M:structures.GraphWithRegistration.op_Assign(structures.GraphWithRegistration!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Graf typu GraphWithRegistration, z ktoreho ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa tento graf nachadza po priradeni. </returns>
        </member>
        <member name="M:structures.GraphWithRegistration.op_Assign(structures.Graph!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Graf, z ktoreho ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa tento graf nachadza po priradeni. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak vstupny parameter nie je typu GraphWithRegistration. </exception>
            <remarks> Vyuziva typovy operator priradenia. </remarks>
        </member>
        <member name="M:structures.GraphWithRegistration.Dispose">
            <summary> Destruktor. </summary>
        </member>
        <member name="T:structures.GraphWithRegistration">
            <summary> Orientovany graf implementujuci registraciu dat. </summary>
        </member>
        <member name="M:structures.Graph.#ctor">
            <summary> Konstruktor. </summary>
        </member>
        <member name="M:structures.Graph.unregisterData(structures.GraphDataType,structures.GraphData!System.Runtime.CompilerServices.IsConst*)">
            <summary> Odstrani z grafu data daneho typu s danym klucom. </summary>
            <param name="dataType"> Typ dat - data vrcholu alebo data hrany. </param>
            <param name="key"> Jedinecny identifikator dat. Jedna sa u adresu triedy, z ktorej vznikla instancia dat. </param>
            <exception cref="T:std.logic_error"> Vyhodena, ak v grafe nie je registrovany dany typ dat s danym klucom. </exception>
            <remarks> 
V ramci metody sa vola nad parametrom key metoda getClassKey().
Metoda odstrani dany typ dat s danym klucom zo vsetkych elementov grafu, ktore ich mozu obsahovat.
</remarks>
        </member>
        <member name="M:structures.Graph.registerData(structures.GraphDataType,structures.GraphData!System.Runtime.CompilerServices.IsConst*)">
            <summary> Zaregistruje v grafe data daneho typu s danym klucom. </summary>
            <param name="dataType"> Typ dat - data vrcholu alebo data hrany. </param>
            <param name="key"> Jedinecny identifikator dat. Jedna sa u adresu triedy, z ktorej vznikla instancia dat. </param>
            <exception cref="T:std.logic_error"> Vyhodena, ak uz je v grafe registrovany dany typ dat s danym klucom. </exception>
            <remarks> V ramci metody sa vola nad parametrom key metoda getClassKey(). </remarks>
        </member>
        <member name="M:structures.Graph.areDataRegistered(structures.GraphDataType,structures.GraphData!System.Runtime.CompilerServices.IsConst*)">
            <summary> Zisti, ci v grafe su registrovane data daneho typu s danym klucom. </summary>
            <param name="dataType"> Typ dat - data vrcholu alebo data hrany. </param>
            <param name="key"> Jedinecny identifikator dat. Jedna sa u adresu triedy, z ktorej vznikla instancia dat. </param>
            <returns> true, ak v grafe su registrovane data daneho typu s danym klucom, false inak. </returns>
            <remarks> V ramci metody sa vola nad parametrom key metoda getClassKey(). </remarks>
        </member>
        <member name="M:structures.Graph.getPredecessors(System.Int32,structures.List&lt;structures.GraphEdge**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adresou vrati zoznam vsetkych hran konciacich v danom vrchole. </summary>
            <param name="vertexId"> Id vrcholu, ktoreho predchodcov chceme ziskat. </param>
            <param name="list"> Referencia na zoznam, do ktoreho sa vlozia smerniky na hrany konciace v danom vrchole. </param>
            <returns> Adresa, na ktorej sa nachadza zoznam naplneny smernikmi na hrany konciace v danom vrchole. </returns>
            <remarks> Navratova hodnota sa zhoduje s adresou, na ktorej sa nachadza argument list. </remarks>
        </member>
        <member name="M:structures.Graph.getSuccessors(System.Int32,structures.List&lt;structures.GraphEdge**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adresou vrati zoznam vsetkych hran zacinajucich v danom vrchole. </summary>
            <param name="vertexId"> Id vrcholu, ktoreho nasledovnikov chceme ziskat. </param>
            <param name="list"> Referencia na zoznam, do ktoreho sa vlozia smerniky na hrany zacianajuce v danom vrchole. </param>
            <returns> Adresa, na ktorej sa nachadza zoznam naplneny smernikmi na hrany zacianajuce v danom vrchole. </returns>
            <remarks> Navratova hodnota sa zhoduje s adresou, na ktorej sa nachadza argument list. </remarks>
        </member>
        <member name="M:structures.Graph.getEdges(structures.List&lt;structures.GraphEdge**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adresou vrati zoznam vsetkych hran grafu. </summary>
            <param name="list"> Referencia na zoznam, do ktoreho sa vlozia smerniky na vsetky hrany grafu. </param>
            <returns> Adresa, na ktorej sa nachadza zoznam naplneny smernikmi na vsetky hrany grafu. </returns>
            <remarks> Navratova hodnota sa zhoduje s adresou, na ktorej sa nachadza argument list. </remarks>
        </member>
        <member name="M:structures.Graph.getEdge(System.Int32,System.Int32)">
            <summary> Vrati orientovanu hranu spajajucu vrcholy s danymi id. </summary>
            <param name="beginVertexId"> Id pociatocneho vrcholu. </param>
            <param name="endVertexId"> Id koncoveho vrcholu. </param>
            <returns> Smernik na hranu grafu. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak medzi danymi vrcholmi neexistuje orientovana hrana. </exception>
        </member>
        <member name="M:structures.Graph.getVertices(structures.List&lt;structures.GraphVertex**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Adresou vrati zoznam vsetkych vrcholov grafu. </summary>
            <param name="list"> Referencia na zoznam, do ktoreho sa vlozia smerniky na vsetky vrcholy grafu. </param>
            <returns> Adresa, na ktorej sa nachadza zoznam naplneny smernikmi na vsetky vrcholy grafu. </returns>
            <remarks> Navratova hodnota sa zhoduje s adresou, na ktorej sa nachadza argument list. </remarks>
        </member>
        <member name="M:structures.Graph.getVertex(System.Int32)">
            <summary> Vrati vrchol s danym id. </summary>
            <param name="vertexId"> Id vrcholu. </param>
            <returns> Smernik na vrchol grafu. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak vrchol s danym id v grafe neexistuje. </exception>
        </member>
        <member name="M:structures.Graph.removeEdge(structures.GraphEdge*)">
            <summary> Odstrani z grafu danu hranu. </summary>
            <param name="edge"> Smernik na rusenu hranu. </param>
            <exception cref="T:std.logic_error"> Vyhodena, ak dana hrana v grafe neexistuje. </exception>
            <remarks> Ak sa hranu podari odstranit z grafu, parameter edge sa stane dangling pointerom. </remarks>
        </member>
        <member name="M:structures.Graph.removeEdge(System.Int32,System.Int32)">
            <summary> Odstrani z grafu hranu. </summary>
            <param name="beginVertexId"> Id pociatocneho vrcholu. </param>
            <param name="endVertexId"> Id koncoveho vrcholu. </param>
            <exception cref="T:std.logic_error"> Vyhodena, ak dana hrana neexistuje. </exception>
        </member>
        <member name="M:structures.Graph.createEdge(System.Int32,System.Int32)">
            <summary> Vytvori orientovanu hranu v grafe. </summary>
            <param name="beginVertexId"> Id pociatocneho vrcholu. </param>
            <param name="endVertexId"> Id koncoveho vrcholu. </param>
            <returns> Smernik na vytvorenu hranu. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak aspon jeden z vrcholov v grafe neexistuje. </exception>
        </member>
        <member name="M:structures.Graph.removeVertex(structures.GraphVertex*)">
            <summary> Odstrani z grafu dany vrchol a vsetky hrany s nim incidentne. </summary>
            <param name="vertex"> Smernik na ruseny vrchol. </param>
            <exception cref="T:std.logic_error"> Vyhodena, ak dany vrchol v grafe neexistuje. </exception>
            <remarks> Ak sa vrchol podari odstranit z grafu, parameter vertex sa stane dangling pointerom. </remarks>
        </member>
        <member name="M:structures.Graph.removeVertex(System.Int32)">
            <summary> Odstrani z grafu vrchol s danym id a vsetky hrany s nim incidentne. </summary>
            <param name="vertexId"> Id ruseneho vrcholu. </param>
            <exception cref="T:std.logic_error"> Vyhodena, ak vrchol s danym id neexistuje. </exception>
        </member>
        <member name="M:structures.Graph.createVertex(System.Int32)">
            <summary> Vytvori vrchol s danym id v grafe. </summary>
            <param name="vertexId"> Id vytvaraneho vrcholu. </param>
            <returns> Smernik na vytvoreny vrchol. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak vrchol s danym id uz existuje. </exception>
        </member>
        <member name="M:structures.Graph.clear">
            <summary> Vymaze obsah grafu, t.j. vrcholy a hrany. Neodstrani zaregistrovane typy dat. </summary>
        </member>
        <member name="M:structures.Graph.size">
            <summary> Vrati pocet vrcholov v grafe. </summary>
            <returns> Pocet vrcholov v grafe. </returns>
        </member>
        <member name="M:structures.Graph.op_Assign(structures.Graph!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Graf, z ktoreho ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa tento graf nachadza po priradeni. </returns>
        </member>
        <member name="M:structures.Graph.op_Assign(structures.Structure!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Struktura (graf), z ktorej ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa tento graf nachadza po priradeni. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak vstupny parameter nie je graf. </exception>
            <remarks> Vyuziva typovy operator priradenia. </remarks>
        </member>
        <member name="M:structures.Graph.clone">
            <summary> Operacia klonovania. Vytvori a vrati duplikat udajovej struktury (grafu). </summary>
            <returns> Ukazovatel na klon struktury. </returns>
        </member>
        <member name="T:structures.Graph">
            <summary> Orientovany graf. </summary>
        </member>
        <member name="F:structures.GraphEdge.endVertex_">
            <summary> Smernik na koncovy vrchol. </summary>
        </member>
        <member name="F:structures.GraphEdge.beginVertex_">
            <summary> Smernik na pociatocny vrchol. </summary>
        </member>
        <member name="M:structures.GraphEdge.getEndVertex">
            <summary> Getter vracajuci koncovy vrchol hrany. </summary>
            <returns> Smernik na koncovy vrchol hrany. </returns>
            <summary> Getter vracajuci koncovy vrchol hrany. </summary>
            <returns> Smernik na koncovy vrchol hrany. </returns>
        </member>
        <member name="M:structures.GraphEdge.getBeginVertex">
            <summary> Getter vracajuci pociatocny vrchol hrany. </summary>
            <returns> Smernik na pociatocny vrchol hrany. </returns>
            <summary> Getter vracajuci pociatocny vrchol hrany. </summary>
            <returns> Smernik na pociatocny vrchol hrany. </returns>
        </member>
        <member name="M:structures.GraphEdge.op_Assign(structures.GraphEdge!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Hrana grafu, z ktorej ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa tato hrana grafu nachadza po priradeni. </returns>
        </member>
        <member name="M:structures.GraphEdge.op_Assign(structures.GraphElement!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Element grafu, z ktoreho ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa tento element grafu nachadza po priradeni. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak vstupny parameter nie je hrana grafu. </exception>
            <remarks> Vyuziva typovy operator priradenia. </remarks>
        </member>
        <member name="M:structures.GraphEdge.clone(structures.GraphVertex*,structures.GraphVertex*)">
            <summary> Operacia klonovania. Vytvori a vrati duplikat hrany grafu, pricom zmeni smerniky na pociatocny a koncovy vrchol. </summary>
            <param name="newBeginVertex"> Smernik na novy pociatocny vrchol. </param>
            <param name="newEndVertex"> Smernik na novy koncovy vrchol. </param>
            <returns> Ukazovatel na klon hrany grafu. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak vrcholy newBeginVertex a newEndVertex patria do roznych grafov. </exception>
            <remarks> Graf, do ktoreho patri klon hrany, sa nastavuje na graf, do ktoreho patri parameter newBeginVertex. </remarks>
        </member>
        <member name="M:structures.GraphEdge.#ctor(structures.GraphEdge!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Kopirovaci konstruktor. </summary>
            <param name="other"> Hrana grafu, z ktorej sa prevezmu vlastnosti. </param>
        </member>
        <member name="M:structures.GraphEdge.#ctor(structures.GraphVertex*,structures.GraphVertex*)">
            <summary> Konstruktor. </summary>
            <param name="beginVertex"> Smernik na pociatocny vrchol. </param>
            <param name="endVertex"> Smernik na koncovy vrchol. </param>
            <exception cref="T:std.logic_error"> Vyhodena, ak vrcholy beginVertex a endVertex patria do roznych grafov. </exception>
            <remarks> Graf, do ktoreho patri vytvarana hrana, sa nastavuje na graf, do ktoreho patri parameter beginVertex. </remarks>
        </member>
        <member name="T:structures.GraphEdge">
            <summary> Orientovana hrana v grafe. </summary>
        </member>
        <member name="F:structures.GraphVertex.id_">
            <summary> Id daneho vrcholu. </summary>
        </member>
        <member name="M:structures.GraphVertex.getId">
            <summary> Getter vracajuci id daneho vrcholu. </summary>
            <returns> Id daneho vrcholu. </returns>
        </member>
        <member name="M:structures.GraphVertex.op_Assign(structures.GraphVertex!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Vrchol grafu, z ktoreho ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa tento vrchol grafu nachadza po priradeni. </returns>
        </member>
        <member name="M:structures.GraphVertex.op_Assign(structures.GraphElement!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Element grafu, z ktoreho ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa tento element grafu nachadza po priradeni. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak vstupny parameter nie je vrchol grafu. </exception>
            <remarks> Vyuziva typovy operator priradenia. </remarks>
        </member>
        <member name="M:structures.GraphVertex.clone(structures.Graph!System.Runtime.CompilerServices.IsConst*)">
            <summary> Operacia klonovania. Vytvori a vrati duplikat vrcholu grafu. </summary>
            <param name="graph"> Smernik na graf, v ktorom sa bude nachadzat vytvoreny klon vrcholu grafu. </param>
            <returns> Ukazovatel na klon vrcholu grafu. </returns>
        </member>
        <member name="M:structures.GraphVertex.#ctor(structures.GraphVertex!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Kopirovaci konstruktor. </summary>
            <param name="other"> Vrchol grafu, z ktoreho sa prevezmu vlastnosti. </param>
        </member>
        <member name="M:structures.GraphVertex.#ctor(structures.Graph!System.Runtime.CompilerServices.IsConst*,System.Int32)">
            <summary> Konstruktor. </summary>
            <param name="graph"> Smernik na graf, v ktorom sa bude vrchol nachadzat. </param>
            <param name="id"> Id vrcholu. </param>
        </member>
        <member name="T:structures.GraphVertex">
            <summary> Vrchol v grafe. </summary>
        </member>
        <member name="F:structures.GraphElement.dataTable_">
            <summary> Smernik na tabulku, v ktorej sa uchovavaju data ulozene v tomto elemente grafu. </summary>
            <remarks>
Klucom je adresa triedy, z ktorej vznikla prislusna instancia dat.
Hodnotou je smernik na prislusnu instanciu dat.
</remarks>
        </member>
        <member name="F:structures.GraphElement.dataType_">
            <summary> Typ dat uchovavanych v tomto elemente grafu. </summary>
        </member>
        <member name="F:structures.GraphElement.graph_">
            <summary> Smernik na graf, v ktorom sa nachadza tento element grafu. </summary>
        </member>
        <member name="M:structures.GraphElement.setGraph(structures.Graph!System.Runtime.CompilerServices.IsConst*)">
            <summary> Setter nastavujuci smernik na graf, v ktorom sa nachadza tento element grafu. </summary>
            <remarks> V ramci metody sa odstrania z tohto elementu grafu vsetky data, ktore nie su registrovane v grafe, na ktory ukazuje prameter graph. </remarks>
        </member>
        <member name="M:structures.GraphElement.getGraph">
            <summary> Getter vracajuci smernik na graf, v ktorom sa nachadza tento element grafu. </summary>
            <returns> Smernik na graf, v ktorom sa nachadza tento element grafu. </returns>
        </member>
        <member name="M:structures.GraphElement.containsData(structures.GraphData!System.Runtime.CompilerServices.IsConst*)">
            <summary> Zisti, ci element grafu uchovava data s danym klucom. </summary>
            <param name="key"> Jedinecny identifikator dat. Jedna sa u adresu triedy, z ktorej vznikla instancia dat. </param>
            <returns> true, ak element grafu uchovava data s danym klucom, false inak. </returns>
            <remarks> V ramci metody sa vola nad parametrom key metoda getClassKey(). </remarks>
        </member>
        <member name="M:structures.GraphElement.accessData(structures.GraphData!System.Runtime.CompilerServices.IsConst*)">
            <summary> Spristupni data s danym klucom. </summary>
            <param name="key"> Jedinecny identifikator dat. Jedna sa u adresu triedy, z ktorej vznikla instancia dat. </param>
            <returns> Adresa, na ktorej sa nachadzaju data ulozene v elemente. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak element grafu neuchovava data s danym klucom. </exception>
            <remarks> V ramci metody sa vola nad parametrom key metoda getClassKey(). </remarks>
            <summary> Spristupni data s danym klucom. </summary>
            <param name="key"> Jedinecny identifikator dat. Jedna sa u adresu triedy, z ktorej vznikla instancia dat. </param>
            <returns> Adresa, na ktorej sa nachadzaju data ulozene v elemente. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak element grafu neuchovava data s danym klucom. </exception>
            <remarks> V ramci metody sa vola nad parametrom key metoda getClassKey(). </remarks>
        </member>
        <member name="M:structures.GraphElement.removeAllData">
            <summary> Odstrani vsetky data z elementu grafu. </summary>
        </member>
        <member name="M:structures.GraphElement.removeData(structures.GraphData!System.Runtime.CompilerServices.IsConst*)">
            <summary> Odstrani data s danym klucom z elementu grafu. </summary>
            <param name="key"> Jedinecny identifikator odstranovanych dat. Jedna sa u adresu triedy, z ktorej vznikla instancia dat. </param>
            <exception cref="T:std.logic_error"> Vyhodena, ak element grafu neuchovava data s danym klucom. </exception>
            <remarks> V ramci metody sa vola nad parametrom key metoda getClassKey(). </remarks>
        </member>
        <member name="M:structures.GraphElement.setData(structures.GraphData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Setter nastavujuci data uchovavane v elemente grafu. </summary>
            <param name="data"> Referencia na data, ktore maju byt uchovavane v elemente grafu. </param>
            <exception cref="T:std.logic_error"> Vyhodena, ak element grafu neuchovava data s danym klucom. </exception>
            <remarks> Kluc sa ziskava priamo z parametra data volanim metody getClassKey().
Samotne data sa ziskavaju z parametra data volanim metody clone().
</remarks>
        </member>
        <member name="M:structures.GraphElement.op_Assign(structures.GraphElement!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Element grafu, z ktoreho ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa tento element grafu nachadza po priradeni. </returns>
        </member>
        <member name="M:structures.GraphElement.Dispose">
            <summary> Destruktor. </summary>
        </member>
        <member name="M:structures.GraphElement.#ctor(structures.GraphElement!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Kopirovaci konstruktor. </summary>
            <param name="other"> Element grafu, z ktoreho sa prevezmu vlastnosti. </param>
        </member>
        <member name="M:structures.GraphElement.#ctor(structures.Graph!System.Runtime.CompilerServices.IsConst*,structures.GraphDataType!System.Runtime.CompilerServices.IsConst)">
            <summary> Konstruktor. </summary>
            <param name="graph"> Smernik na graf, v ktorom sa bude element grafu nachadzat. </param>
            <param name="dataType"> Typ dat ukladanych v elemente grafu. </param>
        </member>
        <member name="T:structures.GraphElement">
            <summary> Trieda predstavujuca element grafu (obycajne vrchol alebo hrana). </summary>
        </member>
        <member name="F:structures.GraphDataLength.length_">
            <summary> Atribut dlzka. Obycajne predstavuje dlzku hrany. </summary>
        </member>
        <member name="F:structures.GraphDataLength.classKey_">
            <summary> Objekt predstavujuci jednoznacny identifikator triedy GraphDataLength. </summary>
            <remarks> Pod jednoznacnym identifikatorom sa rozumie adresa objektu classKey_. </remarks>
        </member>
        <member name="M:structures.GraphDataLength.setLength(System.Double)">
            <summary> Setter nastavujuci atribut dlzka. </summary>
            <param name="price"> Hodnota, na ktoru sa nastavi atribut dlzka. </param>
        </member>
        <member name="M:structures.GraphDataLength.getLength">
            <summary> Getter vracajuci atribut dlzka. </summary>
            <returns> Hodnota atributu dlzka. </returns>
        </member>
        <member name="M:structures.GraphDataLength.op_Assign(structures.GraphDataLength!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Data, z ktorych ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa tieto data nachadzaju po priradeni. </returns>
        </member>
        <member name="M:structures.GraphDataLength.getClassKey">
            <summary> Getter vracajuci jedinecny identifikator triedy GraphDataLength. </summary>
            <returns> Adresa, na ktorej je "ulozena" trieda GraphDataLength. </returns>
        </member>
        <member name="M:structures.GraphDataLength.clone">
            <summary> Operacia klonovania. Vytvori a vrati duplikat dat. </summary>
            <returns> Ukazovatel na klon dat. </returns>
        </member>
        <member name="M:structures.GraphDataLength.op_Assign(structures.GraphData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Data, z ktorych ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa tieto data nachadzaju po priradeni. </returns>
            <exception cref="T:std.logic_error"> Vyhodena, ak vstupny parameter nie je typu GraphDataLength. </exception>
            <remarks> Vyuziva typovy operator priradenia. </remarks>
        </member>
        <member name="M:structures.GraphDataLength.#ctor(structures.GraphDataLength!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Kopirovaci konstruktor. </summary>
            <param name="other"> Data typu GraphDataLength, z ktorych sa prevezmu vlastnosti. </param>
        </member>
        <member name="M:structures.GraphDataLength.#ctor">
            <summary> Konstruktor. </summary>
        </member>
        <member name="T:structures.GraphDataLength">
            <summary> Data ulozene v elemente grafu. Atributom dat je dlzka. </summary>
        </member>
        <member name="M:structures.GraphData.#ctor(structures.GraphData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Kopirovaci konstruktor. </summary>
            <param name="other"> Data, z ktorych sa prevezmu vlastnosti. </param>
        </member>
        <member name="M:structures.GraphData.#ctor">
            <summary> Konstruktor. </summary>
        </member>
        <member name="M:structures.GraphData.getClassKey">
            <summary> Getter vracajuci jedinecny identifikator triedy, z ktorej vznikli prislusne data. </summary>
            <returns> Adresa, na ktorej je "ulozena" trieda. </returns>
        </member>
        <member name="M:structures.GraphData.clone">
            <summary> Operacia klonovania. Vytvori a vrati duplikat dat. </summary>
            <returns> Ukazovatel na klon dat. </returns>
        </member>
        <member name="M:structures.GraphData.op_Assign(structures.GraphData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Operator priradenia. </summary>
            <param name="other"> Data, z ktorych ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa tieto data nachadzaju po priradeni. </returns>
        </member>
        <member name="M:structures.GraphData.Dispose">
            <summary> Destruktor. </summary>
        </member>
        <member name="T:structures.GraphData">
            <summary> Abstraktna trieda predstavujuca data ulozene v elemente grafu. </summary>
        </member>
        <member name="T:structures.GraphDataType">
            <summary> Vymenovany typ predstavujuci typy dat, ktore mozu byt ulozene v elemente grafu. </summary>
        </member>
        <member name="M:structures.Structure.#ctor">
            <summary> Implicitny konstruktor. </summary>
            <summary> Implicitny konstruktor. </summary>
        </member>
        <member name="M:structures.Structure.size">
            <summary> Vrati velkost udajovej struktury. </summary>
            <returns> Velkost udajovej struktury. </returns>
            <summary> Vrati velkost udajovej struktury. </summary>
            <returns> Velkost udajovej struktury. </returns>
        </member>
        <member name="M:structures.Structure.isEmpty">
            <summary> Zisti, ci je struktura prazdna. </summary>
            <returns> true, ak je struktura prazdna, false inak. </returns>
            <remarks> Vyuziva metodu size(), co moze byt v niektorych strukturach neefektivne. Take struktury by tuto metodu mali predefinovat. </remarks>
            <summary> Zisti, ci je struktura prazdna. </summary>
            <returns> true, ak je struktura prazdna, false inak. </returns>
            <remarks> Vyuziva metodu size(), co moze byt v niektorych strukturach neefektivne. Take struktury by tuto metodu mali predefinovat. </remarks>
        </member>
        <member name="M:structures.Structure.clone">
            <summary> Operacia klonovania. Vytvori a vrati duplikat udajovej struktury. </summary>
            <returns> Ukazovatel na klon struktury. </returns>
            <summary> Operacia klonovania. Vytvori a vrati duplikat udajovej struktury. </summary>
            <returns> Ukazovatel na klon struktury. </returns>
        </member>
        <member name="M:structures.Structure.op_Assign(structures.Structure!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary> Priradovaci operator. </summary>
            <param name="other"> Struktura, z ktorej ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa struktura nachadza. </returns>
            <summary> Priradovaci operator. </summary>
            <param name="other"> Struktura, z ktorej ma prebrat vlastnosti. </param>
            <returns> Adresa, na ktorej sa struktura nachadza. </returns>
        </member>
        <member name="M:structures.Structure.Dispose">
            <summary> Destruktor. </summary>
            <summary> Destruktor. </summary>
        </member>
        <member name="T:structures.Structure">
            <summary> Abstraktny predok kazdej udajovej struktury. </summary>
            <summary> Abstraktny predok kazdej udajovej struktury. </summary>
        </member>
    </members>
</doc>